//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Odey.Framework.Keeley.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class KeeleyModel : DbContext
    {
        public KeeleyModel()
            : base("name=KeeleyModel")
        {
            this.Configuration.LazyLoadingEnabled = false;
    		this.Configuration.ProxyCreationEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ApplicationUser> ApplicationUsers { get; set; }
        public DbSet<Book> Books { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<Instrument> Instruments { get; set; }
        public DbSet<InstrumentClass> InstrumentClasses { get; set; }
        public DbSet<Market> Markets { get; set; }
        public DbSet<Region> Regions { get; set; }
        public DbSet<IdentifierType> IdentifierTypes { get; set; }
        public DbSet<InstrumentRelationship> InstrumentRelationships { get; set; }
        public DbSet<Account> Accounts { get; set; }
        public DbSet<CapitalEvent> CapitalEvents { get; set; }
        public DbSet<Custodian> Custodians { get; set; }
        public DbSet<Event> Events { get; set; }
        public DbSet<EventType> EventTypes { get; set; }
        public DbSet<InstrumentEvent> InstrumentEvents { get; set; }
        public DbSet<InstrumentEventType> InstrumentEventTypes { get; set; }
        public DbSet<Currency> Currencies { get; set; }
        public DbSet<Counterparty> Counterparties { get; set; }
        public DbSet<LegalEntity> LegalEntities { get; set; }
        public DbSet<BuySellReason> BuySellReasons { get; set; }
        public DbSet<TradeEvent> TradeEvents { get; set; }
        public DbSet<MatchedStatus> MatchedStatuses { get; set; }
        public DbSet<FXTradeEvent> FXTradeEvents { get; set; }
        public DbSet<ChargeType> ChargeTypes { get; set; }
        public DbSet<PortfolioAggregationLevel> PortfolioAggregationLevels { get; set; }
        public DbSet<InternalAllocation> InternalAllocations { get; set; }
        public DbSet<InstrumentClassHierarchy> InstrumentClassHierarchies { get; set; }
        public DbSet<InstrumentClassRelationship> InstrumentClassRelationships { get; set; }
        public DbSet<EntityProperty> EntityProperties { get; set; }
        public DbSet<Extract> Extracts { get; set; }
        public DbSet<ExtractEntity> ExtractEntities { get; set; }
        public DbSet<ExtractInputConfiguration> ExtractInputConfigurations { get; set; }
        public DbSet<ExtractRun> ExtractRuns { get; set; }
        public DbSet<ExtractType> ExtractTypes { get; set; }
        public DbSet<PortfolioEventType> PortfolioEventTypes { get; set; }
        public DbSet<ExtractEntityPropertyValue> ExtractEntityPropertyValues { get; set; }
        public DbSet<ExtractOutputType> ExtractOutputTypes { get; set; }
        public DbSet<ExtractConfiguration> ExtractConfigurations { get; set; }
        public DbSet<PortfolioEvent> PortfolioEvents { get; set; }
        public DbSet<PortfolioSettlementDate> PortfolioSettlementDates { get; set; }
        public DbSet<Position> Positions { get; set; }
        public DbSet<Portfolio> Portfolios { get; set; }
        public DbSet<EntityRankingScheme> EntityRankingSchemes { get; set; }
        public DbSet<EntityRankingSchemeItem> EntityRankingSchemeItems { get; set; }
        public DbSet<FXRate> FXRates { get; set; }
        public DbSet<RawFXRate> RawFXRates { get; set; }
        public DbSet<EntityRankingSchemeOrder> EntityRankingSchemeOrders { get; set; }
        public DbSet<InstrumentMarket> InstrumentMarkets { get; set; }
        public DbSet<Charge> Charges { get; set; }
        public DbSet<PortfolioRollDate> PortfolioRollDates { get; set; }
        public DbSet<Price> Prices { get; set; }
        public DbSet<RawPrice> RawPrices { get; set; }
        public DbSet<ExtractOutputConfiguration> ExtractOutputConfigurations { get; set; }
        public DbSet<Issuer> Issuers { get; set; }
        public DbSet<Analytic> Analytics { get; set; }
        public DbSet<RawAnalytic> RawAnalytics { get; set; }
        public DbSet<Industry> Industries { get; set; }
        public DbSet<IssuerIndustry> IssuerIndustries { get; set; }
        public DbSet<CountryHoliday> CountryHolidays { get; set; }
        public DbSet<FundPerformance> FundPerformances { get; set; }
        public DbSet<CollectiveInvestmentScheme> CollectiveInvestmentSchemes { get; set; }
        public DbSet<Periodicity> Periodicities { get; set; }
        public DbSet<PeriodicityInterval> PeriodicityIntervals { get; set; }
        public DbSet<ExtractGroup> ExtractGroups { get; set; }
        public DbSet<ExtractGroupItem> ExtractGroupItems { get; set; }
        public DbSet<FMTradeBridgeLastProcessed> FMTradeBridgeLastProcesseds { get; set; }
        public DbSet<IdentifierMapping> IdentifierMappings { get; set; }
        public DbSet<EntityPropertyOverride> EntityPropertyOverrides { get; set; }
        public DbSet<FundWebsiteCacheTime> FundWebsiteCacheTimes { get; set; }
        public DbSet<DealingDateDefinition> DealingDateDefinitions { get; set; }
        public DbSet<ChargeSchedule> ChargeSchedules { get; set; }
        public DbSet<AccountMapping> AccountMappings { get; set; }
        public DbSet<LegalEntityChargeSchedule> LegalEntityChargeSchedules { get; set; }
        public DbSet<ForwardFX> ForwardFXes { get; set; }
        public DbSet<EventIdToRepull> EventIdToRepulls { get; set; }
        public DbSet<FileCollected> FileCollecteds { get; set; }
        public DbSet<FileToBeCollected> FileToBeCollecteds { get; set; }
        public DbSet<CacheInvalidation> CacheInvalidations { get; set; }
        public DbSet<FundNetAssetValue> FundNetAssetValues { get; set; }
        public DbSet<Bond> Bonds { get; set; }
        public DbSet<RestrictedList> RestrictedLists { get; set; }
        public DbSet<Fund> Funds { get; set; }
        public DbSet<Exposure> Exposures { get; set; }
        public DbSet<IndexConstituent> IndexConstituents { get; set; }
        public DbSet<Administrator> Administrators { get; set; }
        public DbSet<Client> Clients { get; set; }
        public DbSet<ClientAccount> ClientAccounts { get; set; }
        public DbSet<ClientTrade> ClientTrades { get; set; }
        public DbSet<ClientPortfolio> ClientPortfolios { get; set; }
        public DbSet<InterestRateReturn> InterestRateReturns { get; set; }
        public DbSet<FailedTrade> FailedTrades { get; set; }
        public DbSet<Beta> Beta { get; set; }
        public DbSet<FileToBeCollectedGroup> FileToBeCollectedGroup { get; set; }
        public DbSet<Index> Indices { get; set; }
        public DbSet<ClientPortfolioBridge> ClientPortfolioBridges { get; set; }
        public DbSet<HealthCheck> HealthChecks { get; set; }
        public DbSet<FundCapitalChange> FundCapitalChanges { get; set; }
        public DbSet<OfficialNetAssetValue> OfficialNetAssetValues { get; set; }
        public DbSet<ClientSubAccountAdministratorMapping> ClientSubAccountAdministratorMappings { get; set; }
        public DbSet<FocusList> FocusLists { get; set; }
        public DbSet<PADealingAccount> PADealingAccounts { get; set; }
        public DbSet<PADealingBalance> PADealingBalances { get; set; }
        public DbSet<PADealing> PADealings { get; set; }
        public DbSet<FMPortfolio> FMPortfolios { get; set; }
        public DbSet<TransferEvent> TransferEvents { get; set; }
        public DbSet<PADealingBroker> PADealingBrokers { get; set; }
        public DbSet<ManagerPriceTarget> ManagerPriceTargets { get; set; }
        public DbSet<ManagerPriceTargetIssuer> ManagerPriceTargetIssuers { get; set; }
        public DbSet<EntityType> EntityTypes { get; set; }
        public DbSet<DerivedAssetClass> DerivedAssetClasses { get; set; }
        public DbSet<SecurityGroup> SecurityGroups { get; set; }
        public DbSet<SecurityGroupFunctionPoint> SecurityGroupFunctionPoints { get; set; }
        public DbSet<AdministratorPortfolio> AdministratorPortfolios { get; set; }
        public DbSet<FundCountryHoliday> FundCountryHolidays { get; set; }
        public DbSet<CorporateAction> CorporateActions { get; set; }
        public DbSet<CorporateActionType> CorporateActionTypes { get; set; }
        public DbSet<AnalystIdea> AnalystIdeas { get; set; }
        public DbSet<RiskAnalytic> RiskAnalytics { get; set; }
        public DbSet<RiskAnalyticType> RiskAnalyticTypes { get; set; }
        public DbSet<BookNetAssetValue> BookNetAssetValues { get; set; }
        public DbSet<OpenedClosedPosition> OpenedClosedPositions { get; set; }
        public DbSet<IssuerAnalytic> IssuerAnalytics { get; set; }
        public DbSet<RawIssuerAnalytic> RawIssuerAnalytics { get; set; }
        public DbSet<AttributionFund> AttributionFunds { get; set; }
        public DbSet<Attribution> Attributions { get; set; }
        public DbSet<ClientTrail> ClientTrails { get; set; }
        public DbSet<Strategy> Strategies { get; set; }
        public DbSet<FocusListPrice> FocusListPrices { get; set; }
        public DbSet<EntityAnalytic> EntityAnalytics { get; set; }
        public DbSet<FactsetPortfolio> FactsetPortfolios { get; set; }
        public DbSet<BloombergIdentifier> BloombergIdentifiers { get; set; }
        public DbSet<FactorHierarchy> FactorHierarchies { get; set; }
        public DbSet<FactorRelationship> FactorRelationships { get; set; }
        public DbSet<CompanySize> CompanySizes { get; set; }
        public DbSet<ExternalPerson> ExternalPersons { get; set; }
        public DbSet<Option> Options { get; set; }
        public DbSet<FundPortfolioChange> FundPortfolioChanges { get; set; }
        public DbSet<FactorBenchmark> FactorBenchmarks { get; set; }
        public DbSet<FactorExposure> FactorExposures { get; set; }
        public DbSet<Future> Futures { get; set; }
        public DbSet<ResearchBroker> ResearchBrokers { get; set; }
        public DbSet<RiskAnalyticPosition> RiskAnalyticPositions { get; set; }
    
        public virtual ObjectResult<PortfolioEvent> PortfolioEventGetPrevious(Nullable<int> positionID, Nullable<System.DateTime> referenceDate, Nullable<System.DateTime> inputDate, Nullable<int> orderingResolution, Nullable<int> portfolioAggregationLevelId, Nullable<int> portfolioEventId)
        {
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var inputDateParameter = inputDate.HasValue ?
                new ObjectParameter("InputDate", inputDate) :
                new ObjectParameter("InputDate", typeof(System.DateTime));
    
            var orderingResolutionParameter = orderingResolution.HasValue ?
                new ObjectParameter("OrderingResolution", orderingResolution) :
                new ObjectParameter("OrderingResolution", typeof(int));
    
            var portfolioAggregationLevelIdParameter = portfolioAggregationLevelId.HasValue ?
                new ObjectParameter("PortfolioAggregationLevelId", portfolioAggregationLevelId) :
                new ObjectParameter("PortfolioAggregationLevelId", typeof(int));
    
            var portfolioEventIdParameter = portfolioEventId.HasValue ?
                new ObjectParameter("PortfolioEventId", portfolioEventId) :
                new ObjectParameter("PortfolioEventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PortfolioEvent>("PortfolioEventGetPrevious", positionIDParameter, referenceDateParameter, inputDateParameter, orderingResolutionParameter, portfolioAggregationLevelIdParameter, portfolioEventIdParameter);
        }
    
        public virtual ObjectResult<PortfolioEvent> PortfolioEventGetPrevious(Nullable<int> positionID, Nullable<System.DateTime> referenceDate, Nullable<System.DateTime> inputDate, Nullable<int> orderingResolution, Nullable<int> portfolioAggregationLevelId, Nullable<int> portfolioEventId, MergeOption mergeOption)
        {
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var inputDateParameter = inputDate.HasValue ?
                new ObjectParameter("InputDate", inputDate) :
                new ObjectParameter("InputDate", typeof(System.DateTime));
    
            var orderingResolutionParameter = orderingResolution.HasValue ?
                new ObjectParameter("OrderingResolution", orderingResolution) :
                new ObjectParameter("OrderingResolution", typeof(int));
    
            var portfolioAggregationLevelIdParameter = portfolioAggregationLevelId.HasValue ?
                new ObjectParameter("PortfolioAggregationLevelId", portfolioAggregationLevelId) :
                new ObjectParameter("PortfolioAggregationLevelId", typeof(int));
    
            var portfolioEventIdParameter = portfolioEventId.HasValue ?
                new ObjectParameter("PortfolioEventId", portfolioEventId) :
                new ObjectParameter("PortfolioEventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PortfolioEvent>("PortfolioEventGetPrevious", mergeOption, positionIDParameter, referenceDateParameter, inputDateParameter, orderingResolutionParameter, portfolioAggregationLevelIdParameter, portfolioEventIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> RollPortfolio(Nullable<int> updateUserId)
        {
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("RollPortfolio", updateUserIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> RollPortfolioSettlementDate(Nullable<int> updateUserId)
        {
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("RollPortfolioSettlementDate", updateUserIdParameter);
        }
    
        public virtual ObjectResult<Position> PositionGetForFundIdExcludingCurrencies(Nullable<int> fundId)
        {
            var fundIdParameter = fundId.HasValue ?
                new ObjectParameter("fundId", fundId) :
                new ObjectParameter("fundId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Position>("PositionGetForFundIdExcludingCurrencies", fundIdParameter);
        }
    
        public virtual ObjectResult<Position> PositionGetForFundIdExcludingCurrencies(Nullable<int> fundId, MergeOption mergeOption)
        {
            var fundIdParameter = fundId.HasValue ?
                new ObjectParameter("fundId", fundId) :
                new ObjectParameter("fundId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Position>("PositionGetForFundIdExcludingCurrencies", mergeOption, fundIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetPositionIdsWherePortfolioEventBreak()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetPositionIdsWherePortfolioEventBreak");
        }
    
        public virtual ObjectResult<RawFXRate> RawFXRate_GetLatest(Nullable<int> currencyID, Nullable<System.DateTime> referenceDate, Nullable<int> entityRankingSchemeId, Nullable<int> rawFXRateIdToIgnore)
        {
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var entityRankingSchemeIdParameter = entityRankingSchemeId.HasValue ?
                new ObjectParameter("EntityRankingSchemeId", entityRankingSchemeId) :
                new ObjectParameter("EntityRankingSchemeId", typeof(int));
    
            var rawFXRateIdToIgnoreParameter = rawFXRateIdToIgnore.HasValue ?
                new ObjectParameter("RawFXRateIdToIgnore", rawFXRateIdToIgnore) :
                new ObjectParameter("RawFXRateIdToIgnore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RawFXRate>("RawFXRate_GetLatest", currencyIDParameter, referenceDateParameter, entityRankingSchemeIdParameter, rawFXRateIdToIgnoreParameter);
        }
    
        public virtual ObjectResult<RawFXRate> RawFXRate_GetLatest(Nullable<int> currencyID, Nullable<System.DateTime> referenceDate, Nullable<int> entityRankingSchemeId, Nullable<int> rawFXRateIdToIgnore, MergeOption mergeOption)
        {
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var entityRankingSchemeIdParameter = entityRankingSchemeId.HasValue ?
                new ObjectParameter("EntityRankingSchemeId", entityRankingSchemeId) :
                new ObjectParameter("EntityRankingSchemeId", typeof(int));
    
            var rawFXRateIdToIgnoreParameter = rawFXRateIdToIgnore.HasValue ?
                new ObjectParameter("RawFXRateIdToIgnore", rawFXRateIdToIgnore) :
                new ObjectParameter("RawFXRateIdToIgnore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RawFXRate>("RawFXRate_GetLatest", mergeOption, currencyIDParameter, referenceDateParameter, entityRankingSchemeIdParameter, rawFXRateIdToIgnoreParameter);
        }
    
        public virtual ObjectResult<RawPrice> RawPrices_GetLatest(Nullable<int> instrumentMarketID, Nullable<System.DateTime> referenceDate, Nullable<int> entityRankingSchemeId, Nullable<int> rawPriceIdToIgnore)
        {
            var instrumentMarketIDParameter = instrumentMarketID.HasValue ?
                new ObjectParameter("InstrumentMarketID", instrumentMarketID) :
                new ObjectParameter("InstrumentMarketID", typeof(int));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var entityRankingSchemeIdParameter = entityRankingSchemeId.HasValue ?
                new ObjectParameter("EntityRankingSchemeId", entityRankingSchemeId) :
                new ObjectParameter("EntityRankingSchemeId", typeof(int));
    
            var rawPriceIdToIgnoreParameter = rawPriceIdToIgnore.HasValue ?
                new ObjectParameter("RawPriceIdToIgnore", rawPriceIdToIgnore) :
                new ObjectParameter("RawPriceIdToIgnore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RawPrice>("RawPrices_GetLatest", instrumentMarketIDParameter, referenceDateParameter, entityRankingSchemeIdParameter, rawPriceIdToIgnoreParameter);
        }
    
        public virtual ObjectResult<RawPrice> RawPrices_GetLatest(Nullable<int> instrumentMarketID, Nullable<System.DateTime> referenceDate, Nullable<int> entityRankingSchemeId, Nullable<int> rawPriceIdToIgnore, MergeOption mergeOption)
        {
            var instrumentMarketIDParameter = instrumentMarketID.HasValue ?
                new ObjectParameter("InstrumentMarketID", instrumentMarketID) :
                new ObjectParameter("InstrumentMarketID", typeof(int));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var entityRankingSchemeIdParameter = entityRankingSchemeId.HasValue ?
                new ObjectParameter("EntityRankingSchemeId", entityRankingSchemeId) :
                new ObjectParameter("EntityRankingSchemeId", typeof(int));
    
            var rawPriceIdToIgnoreParameter = rawPriceIdToIgnore.HasValue ?
                new ObjectParameter("RawPriceIdToIgnore", rawPriceIdToIgnore) :
                new ObjectParameter("RawPriceIdToIgnore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RawPrice>("RawPrices_GetLatest", mergeOption, instrumentMarketIDParameter, referenceDateParameter, entityRankingSchemeIdParameter, rawPriceIdToIgnoreParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> FXRates_Roll(Nullable<int> updateUserId)
        {
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("FXRates_Roll", updateUserIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> Prices_Roll(Nullable<int> updateUserId)
        {
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("Prices_Roll", updateUserIdParameter);
        }
    
        public virtual ObjectResult<RawFXRate> RawFXRate_GetlatestForForward(Nullable<int> currencyID, Nullable<System.DateTime> referenceDate, Nullable<System.DateTime> forwardDate, Nullable<int> entityRankingSchemeId, Nullable<int> rawFXRateIdToIgnore)
        {
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var forwardDateParameter = forwardDate.HasValue ?
                new ObjectParameter("ForwardDate", forwardDate) :
                new ObjectParameter("ForwardDate", typeof(System.DateTime));
    
            var entityRankingSchemeIdParameter = entityRankingSchemeId.HasValue ?
                new ObjectParameter("EntityRankingSchemeId", entityRankingSchemeId) :
                new ObjectParameter("EntityRankingSchemeId", typeof(int));
    
            var rawFXRateIdToIgnoreParameter = rawFXRateIdToIgnore.HasValue ?
                new ObjectParameter("RawFXRateIdToIgnore", rawFXRateIdToIgnore) :
                new ObjectParameter("RawFXRateIdToIgnore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RawFXRate>("RawFXRate_GetlatestForForward", currencyIDParameter, referenceDateParameter, forwardDateParameter, entityRankingSchemeIdParameter, rawFXRateIdToIgnoreParameter);
        }
    
        public virtual ObjectResult<RawFXRate> RawFXRate_GetlatestForForward(Nullable<int> currencyID, Nullable<System.DateTime> referenceDate, Nullable<System.DateTime> forwardDate, Nullable<int> entityRankingSchemeId, Nullable<int> rawFXRateIdToIgnore, MergeOption mergeOption)
        {
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var forwardDateParameter = forwardDate.HasValue ?
                new ObjectParameter("ForwardDate", forwardDate) :
                new ObjectParameter("ForwardDate", typeof(System.DateTime));
    
            var entityRankingSchemeIdParameter = entityRankingSchemeId.HasValue ?
                new ObjectParameter("EntityRankingSchemeId", entityRankingSchemeId) :
                new ObjectParameter("EntityRankingSchemeId", typeof(int));
    
            var rawFXRateIdToIgnoreParameter = rawFXRateIdToIgnore.HasValue ?
                new ObjectParameter("RawFXRateIdToIgnore", rawFXRateIdToIgnore) :
                new ObjectParameter("RawFXRateIdToIgnore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RawFXRate>("RawFXRate_GetlatestForForward", mergeOption, currencyIDParameter, referenceDateParameter, forwardDateParameter, entityRankingSchemeIdParameter, rawFXRateIdToIgnoreParameter);
        }
    
        public virtual ObjectResult<RawAnalytic> RawAnalytic_GetLatest(Nullable<int> instrumentMarketID, Nullable<int> analyticTypeID, Nullable<System.DateTime> referenceDate, Nullable<int> entityRankingSchemeId, Nullable<int> rawAnalyticIdToIgnore)
        {
            var instrumentMarketIDParameter = instrumentMarketID.HasValue ?
                new ObjectParameter("InstrumentMarketID", instrumentMarketID) :
                new ObjectParameter("InstrumentMarketID", typeof(int));
    
            var analyticTypeIDParameter = analyticTypeID.HasValue ?
                new ObjectParameter("AnalyticTypeID", analyticTypeID) :
                new ObjectParameter("AnalyticTypeID", typeof(int));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var entityRankingSchemeIdParameter = entityRankingSchemeId.HasValue ?
                new ObjectParameter("EntityRankingSchemeId", entityRankingSchemeId) :
                new ObjectParameter("EntityRankingSchemeId", typeof(int));
    
            var rawAnalyticIdToIgnoreParameter = rawAnalyticIdToIgnore.HasValue ?
                new ObjectParameter("RawAnalyticIdToIgnore", rawAnalyticIdToIgnore) :
                new ObjectParameter("RawAnalyticIdToIgnore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RawAnalytic>("RawAnalytic_GetLatest", instrumentMarketIDParameter, analyticTypeIDParameter, referenceDateParameter, entityRankingSchemeIdParameter, rawAnalyticIdToIgnoreParameter);
        }
    
        public virtual ObjectResult<RawAnalytic> RawAnalytic_GetLatest(Nullable<int> instrumentMarketID, Nullable<int> analyticTypeID, Nullable<System.DateTime> referenceDate, Nullable<int> entityRankingSchemeId, Nullable<int> rawAnalyticIdToIgnore, MergeOption mergeOption)
        {
            var instrumentMarketIDParameter = instrumentMarketID.HasValue ?
                new ObjectParameter("InstrumentMarketID", instrumentMarketID) :
                new ObjectParameter("InstrumentMarketID", typeof(int));
    
            var analyticTypeIDParameter = analyticTypeID.HasValue ?
                new ObjectParameter("AnalyticTypeID", analyticTypeID) :
                new ObjectParameter("AnalyticTypeID", typeof(int));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var entityRankingSchemeIdParameter = entityRankingSchemeId.HasValue ?
                new ObjectParameter("EntityRankingSchemeId", entityRankingSchemeId) :
                new ObjectParameter("EntityRankingSchemeId", typeof(int));
    
            var rawAnalyticIdToIgnoreParameter = rawAnalyticIdToIgnore.HasValue ?
                new ObjectParameter("RawAnalyticIdToIgnore", rawAnalyticIdToIgnore) :
                new ObjectParameter("RawAnalyticIdToIgnore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RawAnalytic>("RawAnalytic_GetLatest", mergeOption, instrumentMarketIDParameter, analyticTypeIDParameter, referenceDateParameter, entityRankingSchemeIdParameter, rawAnalyticIdToIgnoreParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> Analytic_Roll(Nullable<int> updateUserId)
        {
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("Analytic_Roll", updateUserIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> RollExposure(Nullable<int> updateUserId)
        {
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("RollExposure", updateUserIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> Beta_Roll(Nullable<int> updateUserId)
        {
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("Beta_Roll", updateUserIdParameter);
        }
    
        public virtual int Fund_UpdateClientLoadDate(Nullable<int> fundId, Nullable<System.DateTime> loadDate)
        {
            var fundIdParameter = fundId.HasValue ?
                new ObjectParameter("FundId", fundId) :
                new ObjectParameter("FundId", typeof(int));
    
            var loadDateParameter = loadDate.HasValue ?
                new ObjectParameter("LoadDate", loadDate) :
                new ObjectParameter("LoadDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Fund_UpdateClientLoadDate", fundIdParameter, loadDateParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> Attribution_Roll(Nullable<int> updateUserId)
        {
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("Attribution_Roll", updateUserIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> RiskAnalytic_Roll(Nullable<int> updateUserId)
        {
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("RiskAnalytic_Roll", updateUserIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> IssuerAnalytic_Roll(Nullable<int> updateUserId)
        {
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("IssuerAnalytic_Roll", updateUserIdParameter);
        }
    
        public virtual ObjectResult<RawIssuerAnalytic> RawIssuerAnalytic_Getlatest(Nullable<int> issuerId, Nullable<int> analyticTypeID, Nullable<System.DateTime> referenceDate, Nullable<int> entityRankingSchemeId, Nullable<int> rawIssuerAnalyticIdToIgnore)
        {
            var issuerIdParameter = issuerId.HasValue ?
                new ObjectParameter("IssuerId", issuerId) :
                new ObjectParameter("IssuerId", typeof(int));
    
            var analyticTypeIDParameter = analyticTypeID.HasValue ?
                new ObjectParameter("AnalyticTypeID", analyticTypeID) :
                new ObjectParameter("AnalyticTypeID", typeof(int));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var entityRankingSchemeIdParameter = entityRankingSchemeId.HasValue ?
                new ObjectParameter("EntityRankingSchemeId", entityRankingSchemeId) :
                new ObjectParameter("EntityRankingSchemeId", typeof(int));
    
            var rawIssuerAnalyticIdToIgnoreParameter = rawIssuerAnalyticIdToIgnore.HasValue ?
                new ObjectParameter("RawIssuerAnalyticIdToIgnore", rawIssuerAnalyticIdToIgnore) :
                new ObjectParameter("RawIssuerAnalyticIdToIgnore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RawIssuerAnalytic>("RawIssuerAnalytic_Getlatest", issuerIdParameter, analyticTypeIDParameter, referenceDateParameter, entityRankingSchemeIdParameter, rawIssuerAnalyticIdToIgnoreParameter);
        }
    
        public virtual ObjectResult<RawIssuerAnalytic> RawIssuerAnalytic_Getlatest(Nullable<int> issuerId, Nullable<int> analyticTypeID, Nullable<System.DateTime> referenceDate, Nullable<int> entityRankingSchemeId, Nullable<int> rawIssuerAnalyticIdToIgnore, MergeOption mergeOption)
        {
            var issuerIdParameter = issuerId.HasValue ?
                new ObjectParameter("IssuerId", issuerId) :
                new ObjectParameter("IssuerId", typeof(int));
    
            var analyticTypeIDParameter = analyticTypeID.HasValue ?
                new ObjectParameter("AnalyticTypeID", analyticTypeID) :
                new ObjectParameter("AnalyticTypeID", typeof(int));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var entityRankingSchemeIdParameter = entityRankingSchemeId.HasValue ?
                new ObjectParameter("EntityRankingSchemeId", entityRankingSchemeId) :
                new ObjectParameter("EntityRankingSchemeId", typeof(int));
    
            var rawIssuerAnalyticIdToIgnoreParameter = rawIssuerAnalyticIdToIgnore.HasValue ?
                new ObjectParameter("RawIssuerAnalyticIdToIgnore", rawIssuerAnalyticIdToIgnore) :
                new ObjectParameter("RawIssuerAnalyticIdToIgnore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RawIssuerAnalytic>("RawIssuerAnalytic_Getlatest", mergeOption, issuerIdParameter, analyticTypeIDParameter, referenceDateParameter, entityRankingSchemeIdParameter, rawIssuerAnalyticIdToIgnoreParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> AttributionFund_Roll(Nullable<int> updateUserId)
        {
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("AttributionFund_Roll", updateUserIdParameter);
        }
    
        public virtual int FactorExposure_Delete(Nullable<int> factorExposureId, byte[] dataVersion, Nullable<int> updateUserID)
        {
            var factorExposureIdParameter = factorExposureId.HasValue ?
                new ObjectParameter("FactorExposureId", factorExposureId) :
                new ObjectParameter("FactorExposureId", typeof(int));
    
            var dataVersionParameter = dataVersion != null ?
                new ObjectParameter("DataVersion", dataVersion) :
                new ObjectParameter("DataVersion", typeof(byte[]));
    
            var updateUserIDParameter = updateUserID.HasValue ?
                new ObjectParameter("UpdateUserID", updateUserID) :
                new ObjectParameter("UpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FactorExposure_Delete", factorExposureIdParameter, dataVersionParameter, updateUserIDParameter);
        }
    
        public virtual int FactorExposure_Insert(Nullable<int> factorRelationshipId, Nullable<int> factorBenchmarkId, Nullable<System.DateTime> referenceDate, Nullable<int> fundId, Nullable<int> instrumentMarketId, Nullable<decimal> portfolioVolatility, Nullable<decimal> benchmarkVolatility, Nullable<decimal> trackingError, Nullable<decimal> activeExposure, Nullable<decimal> marginalX100, Nullable<decimal> factorVolatility, Nullable<decimal> totalActiveVolatility, Nullable<decimal> volatilityContribution, Nullable<int> updateUserId)
        {
            var factorRelationshipIdParameter = factorRelationshipId.HasValue ?
                new ObjectParameter("FactorRelationshipId", factorRelationshipId) :
                new ObjectParameter("FactorRelationshipId", typeof(int));
    
            var factorBenchmarkIdParameter = factorBenchmarkId.HasValue ?
                new ObjectParameter("FactorBenchmarkId", factorBenchmarkId) :
                new ObjectParameter("FactorBenchmarkId", typeof(int));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var fundIdParameter = fundId.HasValue ?
                new ObjectParameter("FundId", fundId) :
                new ObjectParameter("FundId", typeof(int));
    
            var instrumentMarketIdParameter = instrumentMarketId.HasValue ?
                new ObjectParameter("InstrumentMarketId", instrumentMarketId) :
                new ObjectParameter("InstrumentMarketId", typeof(int));
    
            var portfolioVolatilityParameter = portfolioVolatility.HasValue ?
                new ObjectParameter("PortfolioVolatility", portfolioVolatility) :
                new ObjectParameter("PortfolioVolatility", typeof(decimal));
    
            var benchmarkVolatilityParameter = benchmarkVolatility.HasValue ?
                new ObjectParameter("BenchmarkVolatility", benchmarkVolatility) :
                new ObjectParameter("BenchmarkVolatility", typeof(decimal));
    
            var trackingErrorParameter = trackingError.HasValue ?
                new ObjectParameter("TrackingError", trackingError) :
                new ObjectParameter("TrackingError", typeof(decimal));
    
            var activeExposureParameter = activeExposure.HasValue ?
                new ObjectParameter("ActiveExposure", activeExposure) :
                new ObjectParameter("ActiveExposure", typeof(decimal));
    
            var marginalX100Parameter = marginalX100.HasValue ?
                new ObjectParameter("MarginalX100", marginalX100) :
                new ObjectParameter("MarginalX100", typeof(decimal));
    
            var factorVolatilityParameter = factorVolatility.HasValue ?
                new ObjectParameter("FactorVolatility", factorVolatility) :
                new ObjectParameter("FactorVolatility", typeof(decimal));
    
            var totalActiveVolatilityParameter = totalActiveVolatility.HasValue ?
                new ObjectParameter("TotalActiveVolatility", totalActiveVolatility) :
                new ObjectParameter("TotalActiveVolatility", typeof(decimal));
    
            var volatilityContributionParameter = volatilityContribution.HasValue ?
                new ObjectParameter("VolatilityContribution", volatilityContribution) :
                new ObjectParameter("VolatilityContribution", typeof(decimal));
    
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FactorExposure_Insert", factorRelationshipIdParameter, factorBenchmarkIdParameter, referenceDateParameter, fundIdParameter, instrumentMarketIdParameter, portfolioVolatilityParameter, benchmarkVolatilityParameter, trackingErrorParameter, activeExposureParameter, marginalX100Parameter, factorVolatilityParameter, totalActiveVolatilityParameter, volatilityContributionParameter, updateUserIdParameter);
        }
    
        public virtual int FactorExposure_Update(Nullable<int> factorExposureId, Nullable<int> factorRelationshipId, Nullable<int> factorBenchmarkId, Nullable<System.DateTime> referenceDate, Nullable<int> fundId, Nullable<int> instrumentMarketId, Nullable<decimal> portfolioVolatility, Nullable<decimal> benchmarkVolatility, Nullable<decimal> trackingError, Nullable<decimal> activeExposure, Nullable<decimal> marginalX100, Nullable<decimal> factorVolatility, Nullable<decimal> totalActiveVolatility, Nullable<decimal> volatilityContribution, Nullable<int> updateUserId, byte[] dataVersion)
        {
            var factorExposureIdParameter = factorExposureId.HasValue ?
                new ObjectParameter("FactorExposureId", factorExposureId) :
                new ObjectParameter("FactorExposureId", typeof(int));
    
            var factorRelationshipIdParameter = factorRelationshipId.HasValue ?
                new ObjectParameter("FactorRelationshipId", factorRelationshipId) :
                new ObjectParameter("FactorRelationshipId", typeof(int));
    
            var factorBenchmarkIdParameter = factorBenchmarkId.HasValue ?
                new ObjectParameter("FactorBenchmarkId", factorBenchmarkId) :
                new ObjectParameter("FactorBenchmarkId", typeof(int));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var fundIdParameter = fundId.HasValue ?
                new ObjectParameter("FundId", fundId) :
                new ObjectParameter("FundId", typeof(int));
    
            var instrumentMarketIdParameter = instrumentMarketId.HasValue ?
                new ObjectParameter("InstrumentMarketId", instrumentMarketId) :
                new ObjectParameter("InstrumentMarketId", typeof(int));
    
            var portfolioVolatilityParameter = portfolioVolatility.HasValue ?
                new ObjectParameter("PortfolioVolatility", portfolioVolatility) :
                new ObjectParameter("PortfolioVolatility", typeof(decimal));
    
            var benchmarkVolatilityParameter = benchmarkVolatility.HasValue ?
                new ObjectParameter("BenchmarkVolatility", benchmarkVolatility) :
                new ObjectParameter("BenchmarkVolatility", typeof(decimal));
    
            var trackingErrorParameter = trackingError.HasValue ?
                new ObjectParameter("TrackingError", trackingError) :
                new ObjectParameter("TrackingError", typeof(decimal));
    
            var activeExposureParameter = activeExposure.HasValue ?
                new ObjectParameter("ActiveExposure", activeExposure) :
                new ObjectParameter("ActiveExposure", typeof(decimal));
    
            var marginalX100Parameter = marginalX100.HasValue ?
                new ObjectParameter("MarginalX100", marginalX100) :
                new ObjectParameter("MarginalX100", typeof(decimal));
    
            var factorVolatilityParameter = factorVolatility.HasValue ?
                new ObjectParameter("FactorVolatility", factorVolatility) :
                new ObjectParameter("FactorVolatility", typeof(decimal));
    
            var totalActiveVolatilityParameter = totalActiveVolatility.HasValue ?
                new ObjectParameter("TotalActiveVolatility", totalActiveVolatility) :
                new ObjectParameter("TotalActiveVolatility", typeof(decimal));
    
            var volatilityContributionParameter = volatilityContribution.HasValue ?
                new ObjectParameter("VolatilityContribution", volatilityContribution) :
                new ObjectParameter("VolatilityContribution", typeof(decimal));
    
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(int));
    
            var dataVersionParameter = dataVersion != null ?
                new ObjectParameter("DataVersion", dataVersion) :
                new ObjectParameter("DataVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FactorExposure_Update", factorExposureIdParameter, factorRelationshipIdParameter, factorBenchmarkIdParameter, referenceDateParameter, fundIdParameter, instrumentMarketIdParameter, portfolioVolatilityParameter, benchmarkVolatilityParameter, trackingErrorParameter, activeExposureParameter, marginalX100Parameter, factorVolatilityParameter, totalActiveVolatilityParameter, volatilityContributionParameter, updateUserIdParameter, dataVersionParameter);
        }
    
        public virtual int FactorHierarchy_Delete(Nullable<int> factorHierarchyId, byte[] dataVersion, Nullable<int> updateUserID)
        {
            var factorHierarchyIdParameter = factorHierarchyId.HasValue ?
                new ObjectParameter("FactorHierarchyId", factorHierarchyId) :
                new ObjectParameter("FactorHierarchyId", typeof(int));
    
            var dataVersionParameter = dataVersion != null ?
                new ObjectParameter("DataVersion", dataVersion) :
                new ObjectParameter("DataVersion", typeof(byte[]));
    
            var updateUserIDParameter = updateUserID.HasValue ?
                new ObjectParameter("UpdateUserID", updateUserID) :
                new ObjectParameter("UpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FactorHierarchy_Delete", factorHierarchyIdParameter, dataVersionParameter, updateUserIDParameter);
        }
    
        public virtual int FactorHierarchy_Insert(string hierarchyName, Nullable<int> updateUserId)
        {
            var hierarchyNameParameter = hierarchyName != null ?
                new ObjectParameter("HierarchyName", hierarchyName) :
                new ObjectParameter("HierarchyName", typeof(string));
    
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FactorHierarchy_Insert", hierarchyNameParameter, updateUserIdParameter);
        }
    
        public virtual int FactorHierarchy_Update(Nullable<int> factorHierarchyId, string hierarchyName, Nullable<int> updateUserId, byte[] dataVersion)
        {
            var factorHierarchyIdParameter = factorHierarchyId.HasValue ?
                new ObjectParameter("FactorHierarchyId", factorHierarchyId) :
                new ObjectParameter("FactorHierarchyId", typeof(int));
    
            var hierarchyNameParameter = hierarchyName != null ?
                new ObjectParameter("HierarchyName", hierarchyName) :
                new ObjectParameter("HierarchyName", typeof(string));
    
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(int));
    
            var dataVersionParameter = dataVersion != null ?
                new ObjectParameter("DataVersion", dataVersion) :
                new ObjectParameter("DataVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FactorHierarchy_Update", factorHierarchyIdParameter, hierarchyNameParameter, updateUserIdParameter, dataVersionParameter);
        }
    
        public virtual int FactorRelationship_Delete(Nullable<int> factorRelationshipId, byte[] dataVersion, Nullable<int> updateUserID)
        {
            var factorRelationshipIdParameter = factorRelationshipId.HasValue ?
                new ObjectParameter("FactorRelationshipId", factorRelationshipId) :
                new ObjectParameter("FactorRelationshipId", typeof(int));
    
            var dataVersionParameter = dataVersion != null ?
                new ObjectParameter("DataVersion", dataVersion) :
                new ObjectParameter("DataVersion", typeof(byte[]));
    
            var updateUserIDParameter = updateUserID.HasValue ?
                new ObjectParameter("UpdateUserID", updateUserID) :
                new ObjectParameter("UpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FactorRelationship_Delete", factorRelationshipIdParameter, dataVersionParameter, updateUserIDParameter);
        }
    
        public virtual int FactorRelationship_Insert(Nullable<int> factorHierarchyId, string factorName, string bloombergFactorName, Nullable<int> parentFactorRelationshipId, Nullable<int> entityTypeId, Nullable<int> entityId, Nullable<int> updateUserId)
        {
            var factorHierarchyIdParameter = factorHierarchyId.HasValue ?
                new ObjectParameter("FactorHierarchyId", factorHierarchyId) :
                new ObjectParameter("FactorHierarchyId", typeof(int));
    
            var factorNameParameter = factorName != null ?
                new ObjectParameter("FactorName", factorName) :
                new ObjectParameter("FactorName", typeof(string));
    
            var bloombergFactorNameParameter = bloombergFactorName != null ?
                new ObjectParameter("BloombergFactorName", bloombergFactorName) :
                new ObjectParameter("BloombergFactorName", typeof(string));
    
            var parentFactorRelationshipIdParameter = parentFactorRelationshipId.HasValue ?
                new ObjectParameter("ParentFactorRelationshipId", parentFactorRelationshipId) :
                new ObjectParameter("ParentFactorRelationshipId", typeof(int));
    
            var entityTypeIdParameter = entityTypeId.HasValue ?
                new ObjectParameter("EntityTypeId", entityTypeId) :
                new ObjectParameter("EntityTypeId", typeof(int));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FactorRelationship_Insert", factorHierarchyIdParameter, factorNameParameter, bloombergFactorNameParameter, parentFactorRelationshipIdParameter, entityTypeIdParameter, entityIdParameter, updateUserIdParameter);
        }
    
        public virtual int FactorRelationship_Update(Nullable<int> factorRelationshipId, Nullable<int> factorHierarchyId, string factorName, string bloombergFactorName, Nullable<int> parentFactorRelationshipId, Nullable<int> entityTypeId, Nullable<int> entityId, Nullable<int> updateUserId, byte[] dataVersion)
        {
            var factorRelationshipIdParameter = factorRelationshipId.HasValue ?
                new ObjectParameter("FactorRelationshipId", factorRelationshipId) :
                new ObjectParameter("FactorRelationshipId", typeof(int));
    
            var factorHierarchyIdParameter = factorHierarchyId.HasValue ?
                new ObjectParameter("FactorHierarchyId", factorHierarchyId) :
                new ObjectParameter("FactorHierarchyId", typeof(int));
    
            var factorNameParameter = factorName != null ?
                new ObjectParameter("FactorName", factorName) :
                new ObjectParameter("FactorName", typeof(string));
    
            var bloombergFactorNameParameter = bloombergFactorName != null ?
                new ObjectParameter("BloombergFactorName", bloombergFactorName) :
                new ObjectParameter("BloombergFactorName", typeof(string));
    
            var parentFactorRelationshipIdParameter = parentFactorRelationshipId.HasValue ?
                new ObjectParameter("ParentFactorRelationshipId", parentFactorRelationshipId) :
                new ObjectParameter("ParentFactorRelationshipId", typeof(int));
    
            var entityTypeIdParameter = entityTypeId.HasValue ?
                new ObjectParameter("EntityTypeId", entityTypeId) :
                new ObjectParameter("EntityTypeId", typeof(int));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            var updateUserIdParameter = updateUserId.HasValue ?
                new ObjectParameter("UpdateUserId", updateUserId) :
                new ObjectParameter("UpdateUserId", typeof(int));
    
            var dataVersionParameter = dataVersion != null ?
                new ObjectParameter("DataVersion", dataVersion) :
                new ObjectParameter("DataVersion", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FactorRelationship_Update", factorRelationshipIdParameter, factorHierarchyIdParameter, factorNameParameter, bloombergFactorNameParameter, parentFactorRelationshipIdParameter, entityTypeIdParameter, entityIdParameter, updateUserIdParameter, dataVersionParameter);
        }
    
        public virtual int RiskAnalyticPosition_Delete(Nullable<int> riskAnalyticPositionId, byte[] dataVersion, Nullable<int> updateUserID)
        {
            var riskAnalyticPositionIdParameter = riskAnalyticPositionId.HasValue ?
                new ObjectParameter("RiskAnalyticPositionId", riskAnalyticPositionId) :
                new ObjectParameter("RiskAnalyticPositionId", typeof(int));
    
            var dataVersionParameter = dataVersion != null ?
                new ObjectParameter("DataVersion", dataVersion) :
                new ObjectParameter("DataVersion", typeof(byte[]));
    
            var updateUserIDParameter = updateUserID.HasValue ?
                new ObjectParameter("UpdateUserID", updateUserID) :
                new ObjectParameter("UpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RiskAnalyticPosition_Delete", riskAnalyticPositionIdParameter, dataVersionParameter, updateUserIDParameter);
        }
    
        public virtual int RiskAnalyticPosition_Insert(Nullable<int> riskAnalyticTypeId, Nullable<System.DateTime> referenceDate, Nullable<int> instrumentMarketId, Nullable<int> fundId, Nullable<decimal> value1d, Nullable<int> updateUserID)
        {
            var riskAnalyticTypeIdParameter = riskAnalyticTypeId.HasValue ?
                new ObjectParameter("RiskAnalyticTypeId", riskAnalyticTypeId) :
                new ObjectParameter("RiskAnalyticTypeId", typeof(int));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var instrumentMarketIdParameter = instrumentMarketId.HasValue ?
                new ObjectParameter("InstrumentMarketId", instrumentMarketId) :
                new ObjectParameter("InstrumentMarketId", typeof(int));
    
            var fundIdParameter = fundId.HasValue ?
                new ObjectParameter("FundId", fundId) :
                new ObjectParameter("FundId", typeof(int));
    
            var value1dParameter = value1d.HasValue ?
                new ObjectParameter("Value1d", value1d) :
                new ObjectParameter("Value1d", typeof(decimal));
    
            var updateUserIDParameter = updateUserID.HasValue ?
                new ObjectParameter("UpdateUserID", updateUserID) :
                new ObjectParameter("UpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RiskAnalyticPosition_Insert", riskAnalyticTypeIdParameter, referenceDateParameter, instrumentMarketIdParameter, fundIdParameter, value1dParameter, updateUserIDParameter);
        }
    
        public virtual int RiskAnalyticPosition_Update(Nullable<int> riskAnalyticPositionId, Nullable<int> riskAnalyticTypeId, Nullable<System.DateTime> referenceDate, Nullable<int> instrumentMarketId, Nullable<int> fundId, Nullable<decimal> value1d, byte[] dataVersion, Nullable<int> updateUserID)
        {
            var riskAnalyticPositionIdParameter = riskAnalyticPositionId.HasValue ?
                new ObjectParameter("RiskAnalyticPositionId", riskAnalyticPositionId) :
                new ObjectParameter("RiskAnalyticPositionId", typeof(int));
    
            var riskAnalyticTypeIdParameter = riskAnalyticTypeId.HasValue ?
                new ObjectParameter("RiskAnalyticTypeId", riskAnalyticTypeId) :
                new ObjectParameter("RiskAnalyticTypeId", typeof(int));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var instrumentMarketIdParameter = instrumentMarketId.HasValue ?
                new ObjectParameter("InstrumentMarketId", instrumentMarketId) :
                new ObjectParameter("InstrumentMarketId", typeof(int));
    
            var fundIdParameter = fundId.HasValue ?
                new ObjectParameter("FundId", fundId) :
                new ObjectParameter("FundId", typeof(int));
    
            var value1dParameter = value1d.HasValue ?
                new ObjectParameter("Value1d", value1d) :
                new ObjectParameter("Value1d", typeof(decimal));
    
            var dataVersionParameter = dataVersion != null ?
                new ObjectParameter("DataVersion", dataVersion) :
                new ObjectParameter("DataVersion", typeof(byte[]));
    
            var updateUserIDParameter = updateUserID.HasValue ?
                new ObjectParameter("UpdateUserID", updateUserID) :
                new ObjectParameter("UpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RiskAnalyticPosition_Update", riskAnalyticPositionIdParameter, riskAnalyticTypeIdParameter, referenceDateParameter, instrumentMarketIdParameter, fundIdParameter, value1dParameter, dataVersionParameter, updateUserIDParameter);
        }
    }
}
