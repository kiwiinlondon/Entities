//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace Odey.Framework.Keeley.Entities
{
    public partial class KeeleyModel : ObjectContext
    {
        public const string ConnectionString = "name=KeeleyModel";
        public const string ContainerName = "KeeleyModel";
    
        #region Constructors
    
        public KeeleyModel()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public KeeleyModel(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public KeeleyModel(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<ApplicationUser> ApplicationUsers
        {
            get { return _applicationUsers  ?? (_applicationUsers = CreateObjectSet<ApplicationUser>("ApplicationUsers")); }
        }
        private ObjectSet<ApplicationUser> _applicationUsers;
    
        public ObjectSet<Book> Books
        {
            get { return _books  ?? (_books = CreateObjectSet<Book>("Books")); }
        }
        private ObjectSet<Book> _books;
    
        public ObjectSet<Country> Countries
        {
            get { return _countries  ?? (_countries = CreateObjectSet<Country>("Countries")); }
        }
        private ObjectSet<Country> _countries;
    
        public ObjectSet<Fund> Funds
        {
            get { return _funds  ?? (_funds = CreateObjectSet<Fund>("Funds")); }
        }
        private ObjectSet<Fund> _funds;
    
        public ObjectSet<Instrument> Instruments
        {
            get { return _instruments  ?? (_instruments = CreateObjectSet<Instrument>("Instruments")); }
        }
        private ObjectSet<Instrument> _instruments;
    
        public ObjectSet<InstrumentClass> InstrumentClasses
        {
            get { return _instrumentClasses  ?? (_instrumentClasses = CreateObjectSet<InstrumentClass>("InstrumentClasses")); }
        }
        private ObjectSet<InstrumentClass> _instrumentClasses;
    
        public ObjectSet<InstrumentMarket> InstrumentMarkets
        {
            get { return _instrumentMarkets  ?? (_instrumentMarkets = CreateObjectSet<InstrumentMarket>("InstrumentMarkets")); }
        }
        private ObjectSet<InstrumentMarket> _instrumentMarkets;
    
        public ObjectSet<Issuer> Issuers
        {
            get { return _issuers  ?? (_issuers = CreateObjectSet<Issuer>("Issuers")); }
        }
        private ObjectSet<Issuer> _issuers;
    
        public ObjectSet<Market> Markets
        {
            get { return _markets  ?? (_markets = CreateObjectSet<Market>("Markets")); }
        }
        private ObjectSet<Market> _markets;
    
        public ObjectSet<Portfolio> Portfolios
        {
            get { return _portfolios  ?? (_portfolios = CreateObjectSet<Portfolio>("Portfolios")); }
        }
        private ObjectSet<Portfolio> _portfolios;
    
        public ObjectSet<Position> Positions
        {
            get { return _positions  ?? (_positions = CreateObjectSet<Position>("Positions")); }
        }
        private ObjectSet<Position> _positions;
    
        public ObjectSet<Region> Regions
        {
            get { return _regions  ?? (_regions = CreateObjectSet<Region>("Regions")); }
        }
        private ObjectSet<Region> _regions;
    
        public ObjectSet<IdentifierType> IdentifierTypes
        {
            get { return _identifierTypes  ?? (_identifierTypes = CreateObjectSet<IdentifierType>("IdentifierTypes")); }
        }
        private ObjectSet<IdentifierType> _identifierTypes;
    
        public ObjectSet<KeeleyType> KeeleyTypes
        {
            get { return _keeleyTypes  ?? (_keeleyTypes = CreateObjectSet<KeeleyType>("KeeleyTypes")); }
        }
        private ObjectSet<KeeleyType> _keeleyTypes;
    
        public ObjectSet<FMContractMapping> FMContractMappings
        {
            get { return _fMContractMappings  ?? (_fMContractMappings = CreateObjectSet<FMContractMapping>("FMContractMappings")); }
        }
        private ObjectSet<FMContractMapping> _fMContractMappings;
    
        public ObjectSet<InstrumentRelationship> InstrumentRelationships
        {
            get { return _instrumentRelationships  ?? (_instrumentRelationships = CreateObjectSet<InstrumentRelationship>("InstrumentRelationships")); }
        }
        private ObjectSet<InstrumentRelationship> _instrumentRelationships;
    
        public ObjectSet<PortfolioChangeControl> PortfolioChangeControls
        {
            get { return _portfolioChangeControls  ?? (_portfolioChangeControls = CreateObjectSet<PortfolioChangeControl>("PortfolioChangeControls")); }
        }
        private ObjectSet<PortfolioChangeControl> _portfolioChangeControls;
    
        public ObjectSet<Account> Accounts
        {
            get { return _accounts  ?? (_accounts = CreateObjectSet<Account>("Accounts")); }
        }
        private ObjectSet<Account> _accounts;
    
        public ObjectSet<CapitalEvent> CapitalEvents
        {
            get { return _capitalEvents  ?? (_capitalEvents = CreateObjectSet<CapitalEvent>("CapitalEvents")); }
        }
        private ObjectSet<CapitalEvent> _capitalEvents;
    
        public ObjectSet<Custodian> Custodians
        {
            get { return _custodians  ?? (_custodians = CreateObjectSet<Custodian>("Custodians")); }
        }
        private ObjectSet<Custodian> _custodians;
    
        public ObjectSet<Event> Events
        {
            get { return _events  ?? (_events = CreateObjectSet<Event>("Events")); }
        }
        private ObjectSet<Event> _events;
    
        public ObjectSet<EventType> EventTypes
        {
            get { return _eventTypes  ?? (_eventTypes = CreateObjectSet<EventType>("EventTypes")); }
        }
        private ObjectSet<EventType> _eventTypes;
    
        public ObjectSet<InstrumentEvent> InstrumentEvents
        {
            get { return _instrumentEvents  ?? (_instrumentEvents = CreateObjectSet<InstrumentEvent>("InstrumentEvents")); }
        }
        private ObjectSet<InstrumentEvent> _instrumentEvents;
    
        public ObjectSet<InstrumentEventType> InstrumentEventTypes
        {
            get { return _instrumentEventTypes  ?? (_instrumentEventTypes = CreateObjectSet<InstrumentEventType>("InstrumentEventTypes")); }
        }
        private ObjectSet<InstrumentEventType> _instrumentEventTypes;
    
        public ObjectSet<PortfolioPositionAccountSettlementDate> PortfolioPositionAccountSettlementDates
        {
            get { return _portfolioPositionAccountSettlementDates  ?? (_portfolioPositionAccountSettlementDates = CreateObjectSet<PortfolioPositionAccountSettlementDate>("PortfolioPositionAccountSettlementDates")); }
        }
        private ObjectSet<PortfolioPositionAccountSettlementDate> _portfolioPositionAccountSettlementDates;
    
        public ObjectSet<PortfolioPositionAccountTradeDate> PortfolioPositionAccountTradeDates
        {
            get { return _portfolioPositionAccountTradeDates  ?? (_portfolioPositionAccountTradeDates = CreateObjectSet<PortfolioPositionAccountTradeDate>("PortfolioPositionAccountTradeDates")); }
        }
        private ObjectSet<PortfolioPositionAccountTradeDate> _portfolioPositionAccountTradeDates;
    
        public ObjectSet<PositionAccount> PositionAccounts
        {
            get { return _positionAccounts  ?? (_positionAccounts = CreateObjectSet<PositionAccount>("PositionAccounts")); }
        }
        private ObjectSet<PositionAccount> _positionAccounts;
    
        public ObjectSet<PositionAccountMovement> PositionAccountMovements
        {
            get { return _positionAccountMovements  ?? (_positionAccountMovements = CreateObjectSet<PositionAccountMovement>("PositionAccountMovements")); }
        }
        private ObjectSet<PositionAccountMovement> _positionAccountMovements;
    
        public ObjectSet<InternalAllocation> InternalAllocations
        {
            get { return _internalAllocations  ?? (_internalAllocations = CreateObjectSet<InternalAllocation>("InternalAllocations")); }
        }
        private ObjectSet<InternalAllocation> _internalAllocations;
    
        public ObjectSet<Currency> Currencies
        {
            get { return _currencies  ?? (_currencies = CreateObjectSet<Currency>("Currencies")); }
        }
        private ObjectSet<Currency> _currencies;
    
        public ObjectSet<Counterparty> Counterparties
        {
            get { return _counterparties  ?? (_counterparties = CreateObjectSet<Counterparty>("Counterparties")); }
        }
        private ObjectSet<Counterparty> _counterparties;
    
        public ObjectSet<LegalEntity> LegalEntities
        {
            get { return _legalEntities  ?? (_legalEntities = CreateObjectSet<LegalEntity>("LegalEntities")); }
        }
        private ObjectSet<LegalEntity> _legalEntities;
    
        public ObjectSet<BuySellReason> BuySellReasons
        {
            get { return _buySellReasons  ?? (_buySellReasons = CreateObjectSet<BuySellReason>("BuySellReasons")); }
        }
        private ObjectSet<BuySellReason> _buySellReasons;
    
        public ObjectSet<TradeEvent> TradeEvents
        {
            get { return _tradeEvents  ?? (_tradeEvents = CreateObjectSet<TradeEvent>("TradeEvents")); }
        }
        private ObjectSet<TradeEvent> _tradeEvents;
    
        public ObjectSet<MatchedStatus> MatchedStatuses
        {
            get { return _matchedStatuses  ?? (_matchedStatuses = CreateObjectSet<MatchedStatus>("MatchedStatuses")); }
        }
        private ObjectSet<MatchedStatus> _matchedStatuses;
    
        public ObjectSet<FXTradeEvent> FXTradeEvents
        {
            get { return _fXTradeEvents  ?? (_fXTradeEvents = CreateObjectSet<FXTradeEvent>("FXTradeEvents")); }
        }
        private ObjectSet<FXTradeEvent> _fXTradeEvents;
    
        public ObjectSet<FX> FXes
        {
            get { return _fXes  ?? (_fXes = CreateObjectSet<FX>("FXes")); }
        }
        private ObjectSet<FX> _fXes;
    
        public ObjectSet<Charge> Charges
        {
            get { return _charges  ?? (_charges = CreateObjectSet<Charge>("Charges")); }
        }
        private ObjectSet<Charge> _charges;
    
        public ObjectSet<ChargeType> ChargeTypes
        {
            get { return _chargeTypes  ?? (_chargeTypes = CreateObjectSet<ChargeType>("ChargeTypes")); }
        }
        private ObjectSet<ChargeType> _chargeTypes;
    
        public ObjectSet<PortfolioPositionAccountMovement> PortfolioPositionAccountMovements
        {
            get { return _portfolioPositionAccountMovements  ?? (_portfolioPositionAccountMovements = CreateObjectSet<PortfolioPositionAccountMovement>("PortfolioPositionAccountMovements")); }
        }
        private ObjectSet<PortfolioPositionAccountMovement> _portfolioPositionAccountMovements;
    
        public ObjectSet<PortfolioAggregationLevel> PortfolioAggregationLevels
        {
            get { return _portfolioAggregationLevels  ?? (_portfolioAggregationLevels = CreateObjectSet<PortfolioAggregationLevel>("PortfolioAggregationLevels")); }
        }
        private ObjectSet<PortfolioAggregationLevel> _portfolioAggregationLevels;

        #endregion
        #region Function Imports
        public virtual ObjectResult<PortfolioPositionAccountMovement> PortfolioPositionAccountMovementGetPrevious(Nullable<int> positionAccountID, Nullable<System.DateTime> referenceDate, Nullable<int> portfolioAggregationLevelId, Nullable<int> positionAccountMovementId)
        {
    
            ObjectParameter positionAccountIDParameter;
    
            if (positionAccountID.HasValue)
            {
                positionAccountIDParameter = new ObjectParameter("PositionAccountID", positionAccountID);
            }
            else
            {
                positionAccountIDParameter = new ObjectParameter("PositionAccountID", typeof(int));
            }
    
            ObjectParameter referenceDateParameter;
    
            if (referenceDate.HasValue)
            {
                referenceDateParameter = new ObjectParameter("ReferenceDate", referenceDate);
            }
            else
            {
                referenceDateParameter = new ObjectParameter("ReferenceDate", typeof(System.DateTime));
            }
    
            ObjectParameter portfolioAggregationLevelIdParameter;
    
            if (portfolioAggregationLevelId.HasValue)
            {
                portfolioAggregationLevelIdParameter = new ObjectParameter("PortfolioAggregationLevelId", portfolioAggregationLevelId);
            }
            else
            {
                portfolioAggregationLevelIdParameter = new ObjectParameter("PortfolioAggregationLevelId", typeof(int));
            }
    
            ObjectParameter positionAccountMovementIdParameter;
    
            if (positionAccountMovementId.HasValue)
            {
                positionAccountMovementIdParameter = new ObjectParameter("PositionAccountMovementId", positionAccountMovementId);
            }
            else
            {
                positionAccountMovementIdParameter = new ObjectParameter("PositionAccountMovementId", typeof(int));
            }
            return base.ExecuteFunction<PortfolioPositionAccountMovement>("PortfolioPositionAccountMovementGetPrevious", positionAccountIDParameter, referenceDateParameter, portfolioAggregationLevelIdParameter, positionAccountMovementIdParameter);
        }
        public virtual ObjectResult<Nullable<int>> PortfolioPositionAccountMovementRollForward(Nullable<int> positionAccountID, Nullable<int> changeNumber, Nullable<int> portfolioAggregationLevelId, Nullable<int> changeNumberDelta, Nullable<decimal> netCostInstrumentCurrencyDelta, Nullable<decimal> netCostBookCurrencyDelta, Nullable<decimal> netPositionDelta)
        {
    
            ObjectParameter positionAccountIDParameter;
    
            if (positionAccountID.HasValue)
            {
                positionAccountIDParameter = new ObjectParameter("PositionAccountID", positionAccountID);
            }
            else
            {
                positionAccountIDParameter = new ObjectParameter("PositionAccountID", typeof(int));
            }
    
            ObjectParameter changeNumberParameter;
    
            if (changeNumber.HasValue)
            {
                changeNumberParameter = new ObjectParameter("ChangeNumber", changeNumber);
            }
            else
            {
                changeNumberParameter = new ObjectParameter("ChangeNumber", typeof(int));
            }
    
            ObjectParameter portfolioAggregationLevelIdParameter;
    
            if (portfolioAggregationLevelId.HasValue)
            {
                portfolioAggregationLevelIdParameter = new ObjectParameter("PortfolioAggregationLevelId", portfolioAggregationLevelId);
            }
            else
            {
                portfolioAggregationLevelIdParameter = new ObjectParameter("PortfolioAggregationLevelId", typeof(int));
            }
    
            ObjectParameter changeNumberDeltaParameter;
    
            if (changeNumberDelta.HasValue)
            {
                changeNumberDeltaParameter = new ObjectParameter("ChangeNumberDelta", changeNumberDelta);
            }
            else
            {
                changeNumberDeltaParameter = new ObjectParameter("ChangeNumberDelta", typeof(int));
            }
    
            ObjectParameter netCostInstrumentCurrencyDeltaParameter;
    
            if (netCostInstrumentCurrencyDelta.HasValue)
            {
                netCostInstrumentCurrencyDeltaParameter = new ObjectParameter("NetCostInstrumentCurrencyDelta", netCostInstrumentCurrencyDelta);
            }
            else
            {
                netCostInstrumentCurrencyDeltaParameter = new ObjectParameter("NetCostInstrumentCurrencyDelta", typeof(decimal));
            }
    
            ObjectParameter netCostBookCurrencyDeltaParameter;
    
            if (netCostBookCurrencyDelta.HasValue)
            {
                netCostBookCurrencyDeltaParameter = new ObjectParameter("NetCostBookCurrencyDelta", netCostBookCurrencyDelta);
            }
            else
            {
                netCostBookCurrencyDeltaParameter = new ObjectParameter("NetCostBookCurrencyDelta", typeof(decimal));
            }
    
            ObjectParameter netPositionDeltaParameter;
    
            if (netPositionDelta.HasValue)
            {
                netPositionDeltaParameter = new ObjectParameter("NetPositionDelta", netPositionDelta);
            }
            else
            {
                netPositionDeltaParameter = new ObjectParameter("NetPositionDelta", typeof(decimal));
            }
            return base.ExecuteFunction<Nullable<int>>("PortfolioPositionAccountMovementRollForward", positionAccountIDParameter, changeNumberParameter, portfolioAggregationLevelIdParameter, changeNumberDeltaParameter, netCostInstrumentCurrencyDeltaParameter, netCostBookCurrencyDeltaParameter, netPositionDeltaParameter);
        }

        #endregion
    }
}
