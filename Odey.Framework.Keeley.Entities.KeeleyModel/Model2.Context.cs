//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace Odey.Framework.Keeley.Entities
{
    public partial class KeeleyModel : ObjectContext
    {
        public const string ConnectionString = "name=KeeleyModel";
        public const string ContainerName = "KeeleyModel";
    
        #region Constructors
    
        public KeeleyModel()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public KeeleyModel(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public KeeleyModel(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<ApplicationUser> ApplicationUsers
        {
            get { return _applicationUsers  ?? (_applicationUsers = CreateObjectSet<ApplicationUser>("ApplicationUsers")); }
        }
        private ObjectSet<ApplicationUser> _applicationUsers;
    
        public ObjectSet<Book> Books
        {
            get { return _books  ?? (_books = CreateObjectSet<Book>("Books")); }
        }
        private ObjectSet<Book> _books;
    
        public ObjectSet<Country> Countries
        {
            get { return _countries  ?? (_countries = CreateObjectSet<Country>("Countries")); }
        }
        private ObjectSet<Country> _countries;
    
        public ObjectSet<Currency> Currencies
        {
            get { return _currencies  ?? (_currencies = CreateObjectSet<Currency>("Currencies")); }
        }
        private ObjectSet<Currency> _currencies;
    
        public ObjectSet<Fund> Funds
        {
            get { return _funds  ?? (_funds = CreateObjectSet<Fund>("Funds")); }
        }
        private ObjectSet<Fund> _funds;
    
        public ObjectSet<Instrument> Instruments
        {
            get { return _instruments  ?? (_instruments = CreateObjectSet<Instrument>("Instruments")); }
        }
        private ObjectSet<Instrument> _instruments;
    
        public ObjectSet<InstrumentClass> InstrumentClasses
        {
            get { return _instrumentClasses  ?? (_instrumentClasses = CreateObjectSet<InstrumentClass>("InstrumentClasses")); }
        }
        private ObjectSet<InstrumentClass> _instrumentClasses;
    
        public ObjectSet<InstrumentMarket> InstrumentMarkets
        {
            get { return _instrumentMarkets  ?? (_instrumentMarkets = CreateObjectSet<InstrumentMarket>("InstrumentMarkets")); }
        }
        private ObjectSet<InstrumentMarket> _instrumentMarkets;
    
        public ObjectSet<InstrumentRelationship> InstrumentRelationships
        {
            get { return _instrumentRelationships  ?? (_instrumentRelationships = CreateObjectSet<InstrumentRelationship>("InstrumentRelationships")); }
        }
        private ObjectSet<InstrumentRelationship> _instrumentRelationships;
    
        public ObjectSet<Issuer> Issuers
        {
            get { return _issuers  ?? (_issuers = CreateObjectSet<Issuer>("Issuers")); }
        }
        private ObjectSet<Issuer> _issuers;
    
        public ObjectSet<LegalEntity> LegalEntities
        {
            get { return _legalEntities  ?? (_legalEntities = CreateObjectSet<LegalEntity>("LegalEntities")); }
        }
        private ObjectSet<LegalEntity> _legalEntities;
    
        public ObjectSet<Market> Markets
        {
            get { return _markets  ?? (_markets = CreateObjectSet<Market>("Markets")); }
        }
        private ObjectSet<Market> _markets;
    
        public ObjectSet<Portfolio> Portfolios
        {
            get { return _portfolios  ?? (_portfolios = CreateObjectSet<Portfolio>("Portfolios")); }
        }
        private ObjectSet<Portfolio> _portfolios;
    
        public ObjectSet<Position> Positions
        {
            get { return _positions  ?? (_positions = CreateObjectSet<Position>("Positions")); }
        }
        private ObjectSet<Position> _positions;
    
        public ObjectSet<Region> Regions
        {
            get { return _regions  ?? (_regions = CreateObjectSet<Region>("Regions")); }
        }
        private ObjectSet<Region> _regions;
    
        public ObjectSet<Strategy> Strategies
        {
            get { return _strategies  ?? (_strategies = CreateObjectSet<Strategy>("Strategies")); }
        }
        private ObjectSet<Strategy> _strategies;
    
        public ObjectSet<TradeType> TradeTypes
        {
            get { return _tradeTypes  ?? (_tradeTypes = CreateObjectSet<TradeType>("TradeTypes")); }
        }
        private ObjectSet<TradeType> _tradeTypes;
    
        public ObjectSet<IdentifierType> IdentifierTypes
        {
            get { return _identifierTypes  ?? (_identifierTypes = CreateObjectSet<IdentifierType>("IdentifierTypes")); }
        }
        private ObjectSet<IdentifierType> _identifierTypes;
    
        public ObjectSet<KeeleyType> KeeleyTypes
        {
            get { return _keeleyTypes  ?? (_keeleyTypes = CreateObjectSet<KeeleyType>("KeeleyTypes")); }
        }
        private ObjectSet<KeeleyType> _keeleyTypes;

        #endregion
    }
}
