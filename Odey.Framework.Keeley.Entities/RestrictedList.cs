//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Odey.Framework.Keeley.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Instrument))]
    public partial class RestrictedList: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
        [DataMember]
        public int RestrictedListId
        {	
    		
            get { return _restrictedListId; }
            set
            {
                if (_restrictedListId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RestrictedListId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _restrictedListId = value;
                    OnPropertyChanged("RestrictedListId");
                }
            }
        }
        private int _restrictedListId;
        [DataMember]
        public int InstrumentId
        {	
    		
            get { return _instrumentId; }
            set
            {
                if (_instrumentId != value)
                {
                    ChangeTracker.RecordOriginalValue("InstrumentId", _instrumentId);
                    if (!IsDeserializing)
                    {
                        if (Instrument != null && Instrument.InstrumentID != value)
                        {
                            Instrument = null;
                        }
                    }
                    _instrumentId = value;
                    OnPropertyChanged("InstrumentId");
                }
            }
        }
        private int _instrumentId;
        [DataMember]
        public System.DateTime EffvFromDt
        {	
    		
            get { return _effvFromDt; }
            set
            {
                if (_effvFromDt != value)
                {
                    ChangeTracker.RecordOriginalValue("EffvFromDt", _effvFromDt);
                    _effvFromDt = value;
                    OnPropertyChanged("EffvFromDt");
                }
            }
        }
        private System.DateTime _effvFromDt;
        [DataMember]
        public System.DateTime EffvToDt
        {	
    		
            get { return _effvToDt; }
            set
            {
                if (_effvToDt != value)
                {
                    ChangeTracker.RecordOriginalValue("EffvToDt", _effvToDt);
                    _effvToDt = value;
                    OnPropertyChanged("EffvToDt");
                }
            }
        }
        private System.DateTime _effvToDt;
        [DataMember]
        public System.DateTime StartDt
        {	
    		
            get { return _startDt; }
            private set
            {
                if (_startDt != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDt", _startDt);
                    _startDt = value;
                    OnPropertyChanged("StartDt");
                }
            }
        }
        private System.DateTime _startDt;
        [DataMember]
        public int UpdateUserID
        {	
    		
            get { return _updateUserID; }
            private set
            {
                if (_updateUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateUserID", _updateUserID);
                    _updateUserID = value;
                    OnPropertyChanged("UpdateUserID");
                }
            }
        }
        private int _updateUserID;
        [DataMember]
        private byte[] DataVersion
        {	
    		
            get { return _dataVersion; }
            set
            {
                if (_dataVersion != value)
                {
                    ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
                    _dataVersion = value;
                    OnPropertyChanged("DataVersion");
                }
            }
        }
        private byte[] _dataVersion;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Instrument Instrument
        {
            get { return _instrument; }
            set
            {
                if (!ReferenceEquals(_instrument, value))
                {
                    var previousValue = _instrument;
                    _instrument = value;
                    FixupInstrument(previousValue);
                    OnNavigationPropertyChanged("Instrument");
                }
            }
        }
        private Instrument _instrument;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Instrument = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupInstrument(Instrument previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (Instrument != null)
            {
                InstrumentId = Instrument.InstrumentID;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Instrument")
                    && (ChangeTracker.OriginalValues["Instrument"] == Instrument))
                {
                    ChangeTracker.OriginalValues.Remove("Instrument");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Instrument", previousValue);
                }
                if (Instrument != null && !Instrument.ChangeTracker.ChangeTrackingEnabled)
                {
                    Instrument.StartTracking();
                }
            }
        }

        #endregion
    }
}
