//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Odey.Framework.Keeley.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ChargeSchedule))]
    public partial class LegalEntityChargeSchedule: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
        [DataMember]
        public int LegalEntityChargeScheduleId
        {	
    		
            get { return _legalEntityChargeScheduleId; }
            set
            {
                if (_legalEntityChargeScheduleId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'LegalEntityChargeScheduleId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _legalEntityChargeScheduleId = value;
                    OnPropertyChanged("LegalEntityChargeScheduleId");
                }
            }
        }
        private int _legalEntityChargeScheduleId;
        [DataMember]
        public Nullable<int> CounterpartyId
        {	
    		
            get { return _counterpartyId; }
            set
            {
                if (_counterpartyId != value)
                {
                    ChangeTracker.RecordOriginalValue("CounterpartyId", _counterpartyId);
                    _counterpartyId = value;
                    OnPropertyChanged("CounterpartyId");
                }
            }
        }
        private Nullable<int> _counterpartyId;
        [DataMember]
        public Nullable<int> CustodianId
        {	
    		
            get { return _custodianId; }
            set
            {
                if (_custodianId != value)
                {
                    ChangeTracker.RecordOriginalValue("CustodianId", _custodianId);
                    _custodianId = value;
                    OnPropertyChanged("CustodianId");
                }
            }
        }
        private Nullable<int> _custodianId;
        [DataMember]
        public int ChargeScheduleId
        {	
    		
            get { return _chargeScheduleId; }
            set
            {
                if (_chargeScheduleId != value)
                {
                    ChangeTracker.RecordOriginalValue("ChargeScheduleId", _chargeScheduleId);
                    if (!IsDeserializing)
                    {
                        if (ChargeSchedule != null && ChargeSchedule.ChargeScheduleId != value)
                        {
                            ChargeSchedule = null;
                        }
                    }
                    _chargeScheduleId = value;
                    OnPropertyChanged("ChargeScheduleId");
                }
            }
        }
        private int _chargeScheduleId;
        [DataMember]
        public System.DateTime EffectiveFromDt
        {	
    		
            get { return _effectiveFromDt; }
            set
            {
                if (_effectiveFromDt != value)
                {
                    ChangeTracker.RecordOriginalValue("EffectiveFromDt", _effectiveFromDt);
                    _effectiveFromDt = value;
                    OnPropertyChanged("EffectiveFromDt");
                }
            }
        }
        private System.DateTime _effectiveFromDt;
        [DataMember]
        public System.DateTime EffectiveToDt
        {	
    		
            get { return _effectiveToDt; }
            set
            {
                if (_effectiveToDt != value)
                {
                    ChangeTracker.RecordOriginalValue("EffectiveToDt", _effectiveToDt);
                    _effectiveToDt = value;
                    OnPropertyChanged("EffectiveToDt");
                }
            }
        }
        private System.DateTime _effectiveToDt;
        [DataMember]
        public int UpdateUserID
        {	
    		
            get { return _updateUserID; }
            private set
            {
                if (_updateUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateUserID", _updateUserID);
                    _updateUserID = value;
                    OnPropertyChanged("UpdateUserID");
                }
            }
        }
        private int _updateUserID;
        [DataMember]
        private byte[] DataVersion
        {	
    		
            get { return _dataVersion; }
            set
            {
                if (_dataVersion != value)
                {
                    ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
                    _dataVersion = value;
                    OnPropertyChanged("DataVersion");
                }
            }
        }
        private byte[] _dataVersion;
        [DataMember]
        public Nullable<int> CountryId
        {	
    		
            get { return _countryId; }
            set
            {
                if (_countryId != value)
                {
                    ChangeTracker.RecordOriginalValue("CountryId", _countryId);
                    _countryId = value;
                    OnPropertyChanged("CountryId");
                }
            }
        }
        private Nullable<int> _countryId;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public ChargeSchedule ChargeSchedule
        {
            get { return _chargeSchedule; }
            set
            {
                if (!ReferenceEquals(_chargeSchedule, value))
                {
                    var previousValue = _chargeSchedule;
                    _chargeSchedule = value;
                    FixupChargeSchedule(previousValue);
                    OnNavigationPropertyChanged("ChargeSchedule");
                }
            }
        }
        private ChargeSchedule _chargeSchedule;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ChargeSchedule = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupChargeSchedule(ChargeSchedule previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LegalEntityChargeSchedules.Contains(this))
            {
                previousValue.LegalEntityChargeSchedules.Remove(this);
            }
    
            if (ChargeSchedule != null)
            {
                if (!ChargeSchedule.LegalEntityChargeSchedules.Contains(this))
                {
                    ChargeSchedule.LegalEntityChargeSchedules.Add(this);
                }
    
                ChargeScheduleId = ChargeSchedule.ChargeScheduleId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ChargeSchedule")
                    && (ChangeTracker.OriginalValues["ChargeSchedule"] == ChargeSchedule))
                {
                    ChangeTracker.OriginalValues.Remove("ChargeSchedule");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ChargeSchedule", previousValue);
                }
                if (ChargeSchedule != null && !ChargeSchedule.ChangeTracker.ChangeTrackingEnabled)
                {
                    ChargeSchedule.StartTracking();
                }
            }
        }

        #endregion
    }
}
