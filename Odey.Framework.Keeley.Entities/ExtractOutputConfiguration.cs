//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Odey.Framework.Keeley.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(EntityProperty))]
    public partial class ExtractOutputConfiguration: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
        [DataMember]
        public int ExtractOutputConfigurationID
        {	
    		
            get { return _extractOutputConfigurationID; }
            set
            {
                if (_extractOutputConfigurationID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ExtractOutputConfigurationID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _extractOutputConfigurationID = value;
                    OnPropertyChanged("ExtractOutputConfigurationID");
                }
            }
        }
        private int _extractOutputConfigurationID;
        [DataMember]
        public int ExtractId
        {	
    		
            get { return _extractId; }
            set
            {
                if (_extractId != value)
                {
                    ChangeTracker.RecordOriginalValue("ExtractId", _extractId);
                    _extractId = value;
                    OnPropertyChanged("ExtractId");
                }
            }
        }
        private int _extractId;
        [DataMember]
        public string Label
        {	
    		
            get { return _label; }
            set
            {
                if (_label != value)
                {
                    _label = value;
                    OnPropertyChanged("Label");
                }
            }
        }
        private string _label;
        [DataMember]
        public System.DateTime StartDt
        {	
    		
            get { return _startDt; }
            private set
            {
                if (_startDt != value)
                {
                    _startDt = value;
                    OnPropertyChanged("StartDt");
                }
            }
        }
        private System.DateTime _startDt;
        [DataMember]
        public int UpdateUserID
        {	
    		
            get { return _updateUserID; }
            private set
            {
                if (_updateUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateUserID", _updateUserID);
                    _updateUserID = value;
                    OnPropertyChanged("UpdateUserID");
                }
            }
        }
        private int _updateUserID;
        [DataMember]
        private byte[] DataVersion
        {	
    		
            get { return _dataVersion; }
            set
            {
                if (_dataVersion != value)
                {
                    _dataVersion = value;
                    OnPropertyChanged("DataVersion");
                }
            }
        }
        private byte[] _dataVersion;
        [DataMember]
        public bool ChangesCanBeIgnored
        {	
    		
            get { return _changesCanBeIgnored; }
            set
            {
                if (_changesCanBeIgnored != value)
                {
                    _changesCanBeIgnored = value;
                    OnPropertyChanged("ChangesCanBeIgnored");
                }
            }
        }
        private bool _changesCanBeIgnored;
        [DataMember]
        public int PrincipalEntityPropertyId
        {	
    		
            get { return _principalEntityPropertyId; }
            set
            {
                if (_principalEntityPropertyId != value)
                {
                    ChangeTracker.RecordOriginalValue("PrincipalEntityPropertyId", _principalEntityPropertyId);
                    if (!IsDeserializing)
                    {
                        if (PrincipalEntityProperty != null && PrincipalEntityProperty.EntityPropertyID != value)
                        {
                            PrincipalEntityProperty = null;
                        }
                    }
                    _principalEntityPropertyId = value;
                    OnPropertyChanged("PrincipalEntityPropertyId");
                }
            }
        }
        private int _principalEntityPropertyId;
        [DataMember]
        public Nullable<int> DependantEntityPropertyId
        {	
    		
            get { return _dependantEntityPropertyId; }
            set
            {
                if (_dependantEntityPropertyId != value)
                {
                    ChangeTracker.RecordOriginalValue("DependantEntityPropertyId", _dependantEntityPropertyId);
                    if (!IsDeserializing)
                    {
                        if (DependantEntityProperty != null && DependantEntityProperty.EntityPropertyID != value)
                        {
                            DependantEntityProperty = null;
                        }
                    }
                    _dependantEntityPropertyId = value;
                    OnPropertyChanged("DependantEntityPropertyId");
                }
            }
        }
        private Nullable<int> _dependantEntityPropertyId;
        [DataMember]
        public int OrderBy
        {	
    		
            get { return _orderBy; }
            set
            {
                if (_orderBy != value)
                {
                    _orderBy = value;
                    OnPropertyChanged("OrderBy");
                }
            }
        }
        private int _orderBy;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public EntityProperty DependantEntityProperty
        {
            get { return _dependantEntityProperty; }
            set
            {
                if (!ReferenceEquals(_dependantEntityProperty, value))
                {
                    var previousValue = _dependantEntityProperty;
                    _dependantEntityProperty = value;
                    FixupDependantEntityProperty(previousValue);
                    OnNavigationPropertyChanged("DependantEntityProperty");
                }
            }
        }
        private EntityProperty _dependantEntityProperty;
    
        [DataMember]
        public EntityProperty PrincipalEntityProperty
        {
            get { return _principalEntityProperty; }
            set
            {
                if (!ReferenceEquals(_principalEntityProperty, value))
                {
                    var previousValue = _principalEntityProperty;
                    _principalEntityProperty = value;
                    FixupPrincipalEntityProperty(previousValue);
                    OnNavigationPropertyChanged("PrincipalEntityProperty");
                }
            }
        }
        private EntityProperty _principalEntityProperty;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DependantEntityProperty = null;
            PrincipalEntityProperty = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupDependantEntityProperty(EntityProperty previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (DependantEntityProperty != null)
            {
                DependantEntityPropertyId = DependantEntityProperty.EntityPropertyID;
            }
    
            else if (!skipKeys)
            {
                DependantEntityPropertyId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DependantEntityProperty")
                    && (ChangeTracker.OriginalValues["DependantEntityProperty"] == DependantEntityProperty))
                {
                    ChangeTracker.OriginalValues.Remove("DependantEntityProperty");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DependantEntityProperty", previousValue);
                }
                if (DependantEntityProperty != null && !DependantEntityProperty.ChangeTracker.ChangeTrackingEnabled)
                {
                    DependantEntityProperty.StartTracking();
                }
            }
        }
    
        private void FixupPrincipalEntityProperty(EntityProperty previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (PrincipalEntityProperty != null)
            {
                PrincipalEntityPropertyId = PrincipalEntityProperty.EntityPropertyID;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PrincipalEntityProperty")
                    && (ChangeTracker.OriginalValues["PrincipalEntityProperty"] == PrincipalEntityProperty))
                {
                    ChangeTracker.OriginalValues.Remove("PrincipalEntityProperty");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PrincipalEntityProperty", previousValue);
                }
                if (PrincipalEntityProperty != null && !PrincipalEntityProperty.ChangeTracker.ChangeTrackingEnabled)
                {
                    PrincipalEntityProperty.StartTracking();
                }
            }
        }

        #endregion
    }
}
