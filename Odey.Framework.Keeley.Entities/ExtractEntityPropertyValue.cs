//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Odey.Framework.Keeley.Entities
{
    [DataContract(IsReference = true)]
    public partial class ExtractEntityPropertyValue: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
        [DataMember]
        public int ExtractEntityPropertyValueID
        {	
    		
            get { return _extractEntityPropertyValueID; }
            set
            {
                if (_extractEntityPropertyValueID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ExtractEntityPropertyValueID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _extractEntityPropertyValueID = value;
                    OnPropertyChanged("ExtractEntityPropertyValueID");
                }
            }
        }
        private int _extractEntityPropertyValueID;
        [DataMember]
        public int ExtractEntityID
        {	
    		
            get { return _extractEntityID; }
            set
            {
                if (_extractEntityID != value)
                {
                    ChangeTracker.RecordOriginalValue("ExtractEntityID", _extractEntityID);
                    _extractEntityID = value;
                    OnPropertyChanged("ExtractEntityID");
                }
            }
        }
        private int _extractEntityID;
        [DataMember]
        public int EntityPropertyId
        {	
    		
            get { return _entityPropertyId; }
            set
            {
                if (_entityPropertyId != value)
                {
                    ChangeTracker.RecordOriginalValue("EntityPropertyId", _entityPropertyId);
                    _entityPropertyId = value;
                    OnPropertyChanged("EntityPropertyId");
                }
            }
        }
        private int _entityPropertyId;
        [DataMember]
        public Nullable<int> PreviousIntValue
        {	
    		
            get { return _previousIntValue; }
            set
            {
                if (_previousIntValue != value)
                {
                    _previousIntValue = value;
                    OnPropertyChanged("PreviousIntValue");
                }
            }
        }
        private Nullable<int> _previousIntValue;
        [DataMember]
        public Nullable<int> IntValue
        {	
    		
            get { return _intValue; }
            set
            {
                if (_intValue != value)
                {
                    _intValue = value;
                    OnPropertyChanged("IntValue");
                }
            }
        }
        private Nullable<int> _intValue;
        [DataMember]
        public string StringValue
        {	
    		
            get { return _stringValue; }
            set
            {
                if (_stringValue != value)
                {
                    _stringValue = value;
                    OnPropertyChanged("StringValue");
                }
            }
        }
        private string _stringValue;
        [DataMember]
        public string PreviousStringValue
        {	
    		
            get { return _previousStringValue; }
            set
            {
                if (_previousStringValue != value)
                {
                    _previousStringValue = value;
                    OnPropertyChanged("PreviousStringValue");
                }
            }
        }
        private string _previousStringValue;
        [DataMember]
        public Nullable<decimal> DecimalValue
        {	
    		
            get { return _decimalValue; }
            set
            {
                if (_decimalValue != value)
                {
                    _decimalValue = value;
                    OnPropertyChanged("DecimalValue");
                }
            }
        }
        private Nullable<decimal> _decimalValue;
        [DataMember]
        public Nullable<decimal> PreviousDecimalValue
        {	
    		
            get { return _previousDecimalValue; }
            set
            {
                if (_previousDecimalValue != value)
                {
                    _previousDecimalValue = value;
                    OnPropertyChanged("PreviousDecimalValue");
                }
            }
        }
        private Nullable<decimal> _previousDecimalValue;
        [DataMember]
        public Nullable<System.DateTime> DateTimeValue
        {	
    		
            get { return _dateTimeValue; }
            set
            {
                if (_dateTimeValue != value)
                {
                    _dateTimeValue = value;
                    OnPropertyChanged("DateTimeValue");
                }
            }
        }
        private Nullable<System.DateTime> _dateTimeValue;
        [DataMember]
        public Nullable<System.DateTime> PreviousDateTimeValue
        {	
    		
            get { return _previousDateTimeValue; }
            set
            {
                if (_previousDateTimeValue != value)
                {
                    _previousDateTimeValue = value;
                    OnPropertyChanged("PreviousDateTimeValue");
                }
            }
        }
        private Nullable<System.DateTime> _previousDateTimeValue;
        [DataMember]
        public Nullable<bool> BitValue
        {	
    		
            get { return _bitValue; }
            set
            {
                if (_bitValue != value)
                {
                    _bitValue = value;
                    OnPropertyChanged("BitValue");
                }
            }
        }
        private Nullable<bool> _bitValue;
        [DataMember]
        public Nullable<bool> PreviousBitValue
        {	
    		
            get { return _previousBitValue; }
            set
            {
                if (_previousBitValue != value)
                {
                    _previousBitValue = value;
                    OnPropertyChanged("PreviousBitValue");
                }
            }
        }
        private Nullable<bool> _previousBitValue;
        [DataMember]
        public System.DateTime StartDt
        {	
    		
            get { return _startDt; }
            private set
            {
                if (_startDt != value)
                {
                    _startDt = value;
                    OnPropertyChanged("StartDt");
                }
            }
        }
        private System.DateTime _startDt;
        [DataMember]
        public int UpdateUserID
        {	
    		
            get { return _updateUserID; }
            private set
            {
                if (_updateUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateUserID", _updateUserID);
                    _updateUserID = value;
                    OnPropertyChanged("UpdateUserID");
                }
            }
        }
        private int _updateUserID;
        [DataMember]
        private byte[] DataVersion
        {	
    		
            get { return _dataVersion; }
            set
            {
                if (_dataVersion != value)
                {
                    _dataVersion = value;
                    OnPropertyChanged("DataVersion");
                }
            }
        }
        private byte[] _dataVersion;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
