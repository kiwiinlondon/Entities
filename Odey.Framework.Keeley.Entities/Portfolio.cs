//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Odey.Framework.Keeley.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Position))]
    [KnownType(typeof(Portfolio))]
    [KnownType(typeof(FXRate))]
    public partial class Portfolio: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
        [DataMember]
        public int PortfolioId
        {	
    		
            get { return _portfolioId; }
            set
            {
                if (_portfolioId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PortfolioId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _portfolioId = value;
                    OnPropertyChanged("PortfolioId");
                }
            }
        }
        private int _portfolioId;
        [DataMember]
        public int PositionId
        {	
    		
            get { return _positionId; }
            set
            {
                if (_positionId != value)
                {
                    ChangeTracker.RecordOriginalValue("PositionId", _positionId);
                    if (!IsDeserializing)
                    {
                        if (Position != null && Position.PositionId != value)
                        {
                            Position = null;
                        }
                    }
                    _positionId = value;
                    OnPropertyChanged("PositionId");
                }
            }
        }
        private int _positionId;
        [DataMember]
        public System.DateTime ReferenceDate
        {	
    		
            get { return _referenceDate; }
            set
            {
                if (_referenceDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ReferenceDate", _referenceDate);
                    _referenceDate = value;
                    OnPropertyChanged("ReferenceDate");
                }
            }
        }
        private System.DateTime _referenceDate;
        [DataMember]
        public decimal NetPosition
        {	
    		
            get { return _netPosition; }
            set
            {
                if (_netPosition != value)
                {
                    ChangeTracker.RecordOriginalValue("NetPosition", _netPosition);
                    _netPosition = value;
                    OnPropertyChanged("NetPosition");
                }
            }
        }
        private decimal _netPosition;
        [DataMember]
        public decimal NetCostInstrumentCurrency
        {	
    		
            get { return _netCostInstrumentCurrency; }
            set
            {
                if (_netCostInstrumentCurrency != value)
                {
                    ChangeTracker.RecordOriginalValue("NetCostInstrumentCurrency", _netCostInstrumentCurrency);
                    _netCostInstrumentCurrency = value;
                    OnPropertyChanged("NetCostInstrumentCurrency");
                }
            }
        }
        private decimal _netCostInstrumentCurrency;
        [DataMember]
        public decimal NetCostBookCurrency
        {	
    		
            get { return _netCostBookCurrency; }
            set
            {
                if (_netCostBookCurrency != value)
                {
                    ChangeTracker.RecordOriginalValue("NetCostBookCurrency", _netCostBookCurrency);
                    _netCostBookCurrency = value;
                    OnPropertyChanged("NetCostBookCurrency");
                }
            }
        }
        private decimal _netCostBookCurrency;
        [DataMember]
        public decimal DeltaNetCostInstrumentCurrency
        {	
    		
            get { return _deltaNetCostInstrumentCurrency; }
            set
            {
                if (_deltaNetCostInstrumentCurrency != value)
                {
                    ChangeTracker.RecordOriginalValue("DeltaNetCostInstrumentCurrency", _deltaNetCostInstrumentCurrency);
                    _deltaNetCostInstrumentCurrency = value;
                    OnPropertyChanged("DeltaNetCostInstrumentCurrency");
                }
            }
        }
        private decimal _deltaNetCostInstrumentCurrency;
        [DataMember]
        public decimal DeltaNetCostBookCurrency
        {	
    		
            get { return _deltaNetCostBookCurrency; }
            set
            {
                if (_deltaNetCostBookCurrency != value)
                {
                    ChangeTracker.RecordOriginalValue("DeltaNetCostBookCurrency", _deltaNetCostBookCurrency);
                    _deltaNetCostBookCurrency = value;
                    OnPropertyChanged("DeltaNetCostBookCurrency");
                }
            }
        }
        private decimal _deltaNetCostBookCurrency;
        [DataMember]
        public decimal TodayNetPostionChange
        {	
    		
            get { return _todayNetPostionChange; }
            set
            {
                if (_todayNetPostionChange != value)
                {
                    ChangeTracker.RecordOriginalValue("TodayNetPostionChange", _todayNetPostionChange);
                    _todayNetPostionChange = value;
                    OnPropertyChanged("TodayNetPostionChange");
                }
            }
        }
        private decimal _todayNetPostionChange;
        [DataMember]
        public decimal TodayDeltaNetCostChangeInstrumentCurrency
        {	
    		
            get { return _todayDeltaNetCostChangeInstrumentCurrency; }
            set
            {
                if (_todayDeltaNetCostChangeInstrumentCurrency != value)
                {
                    ChangeTracker.RecordOriginalValue("TodayDeltaNetCostChangeInstrumentCurrency", _todayDeltaNetCostChangeInstrumentCurrency);
                    _todayDeltaNetCostChangeInstrumentCurrency = value;
                    OnPropertyChanged("TodayDeltaNetCostChangeInstrumentCurrency");
                }
            }
        }
        private decimal _todayDeltaNetCostChangeInstrumentCurrency;
        [DataMember]
        public decimal TodayDeltaNetCostChangeBookCurrency
        {	
    		
            get { return _todayDeltaNetCostChangeBookCurrency; }
            set
            {
                if (_todayDeltaNetCostChangeBookCurrency != value)
                {
                    ChangeTracker.RecordOriginalValue("TodayDeltaNetCostChangeBookCurrency", _todayDeltaNetCostChangeBookCurrency);
                    _todayDeltaNetCostChangeBookCurrency = value;
                    OnPropertyChanged("TodayDeltaNetCostChangeBookCurrency");
                }
            }
        }
        private decimal _todayDeltaNetCostChangeBookCurrency;
        [DataMember]
        public decimal TodayNetCostChangeInstrumentCurrency
        {	
    		
            get { return _todayNetCostChangeInstrumentCurrency; }
            set
            {
                if (_todayNetCostChangeInstrumentCurrency != value)
                {
                    ChangeTracker.RecordOriginalValue("TodayNetCostChangeInstrumentCurrency", _todayNetCostChangeInstrumentCurrency);
                    _todayNetCostChangeInstrumentCurrency = value;
                    OnPropertyChanged("TodayNetCostChangeInstrumentCurrency");
                }
            }
        }
        private decimal _todayNetCostChangeInstrumentCurrency;
        [DataMember]
        public decimal TodayNetCostChangeBookCurrency
        {	
    		
            get { return _todayNetCostChangeBookCurrency; }
            set
            {
                if (_todayNetCostChangeBookCurrency != value)
                {
                    ChangeTracker.RecordOriginalValue("TodayNetCostChangeBookCurrency", _todayNetCostChangeBookCurrency);
                    _todayNetCostChangeBookCurrency = value;
                    OnPropertyChanged("TodayNetCostChangeBookCurrency");
                }
            }
        }
        private decimal _todayNetCostChangeBookCurrency;
        [DataMember]
        public System.DateTime StartDt
        {	
    		
            get { return _startDt; }
            private set
            {
                if (_startDt != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDt", _startDt);
                    _startDt = value;
                    OnPropertyChanged("StartDt");
                }
            }
        }
        private System.DateTime _startDt;
        [DataMember]
        public int UpdateUserID
        {	
    		
            get { return _updateUserID; }
            private set
            {
                if (_updateUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateUserID", _updateUserID);
                    _updateUserID = value;
                    OnPropertyChanged("UpdateUserID");
                }
            }
        }
        private int _updateUserID;
        [DataMember]
        private byte[] DataVersion
        {	
    		
            get { return _dataVersion; }
            set
            {
                if (_dataVersion != value)
                {
                    ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
                    _dataVersion = value;
                    OnPropertyChanged("DataVersion");
                }
            }
        }
        private byte[] _dataVersion;
        [DataMember]
        public decimal TodayCashBenefit
        {	
    		
            get { return _todayCashBenefit; }
            set
            {
                if (_todayCashBenefit != value)
                {
                    ChangeTracker.RecordOriginalValue("TodayCashBenefit", _todayCashBenefit);
                    _todayCashBenefit = value;
                    OnPropertyChanged("TodayCashBenefit");
                }
            }
        }
        private decimal _todayCashBenefit;
        [DataMember]
        public decimal TodayCashBenefitBookCurrency
        {	
    		
            get { return _todayCashBenefitBookCurrency; }
            set
            {
                if (_todayCashBenefitBookCurrency != value)
                {
                    ChangeTracker.RecordOriginalValue("TodayCashBenefitBookCurrency", _todayCashBenefitBookCurrency);
                    _todayCashBenefitBookCurrency = value;
                    OnPropertyChanged("TodayCashBenefitBookCurrency");
                }
            }
        }
        private decimal _todayCashBenefitBookCurrency;
        [DataMember]
        public decimal TodayAccrual
        {	
    		
            get { return _todayAccrual; }
            set
            {
                if (_todayAccrual != value)
                {
                    ChangeTracker.RecordOriginalValue("TodayAccrual", _todayAccrual);
                    _todayAccrual = value;
                    OnPropertyChanged("TodayAccrual");
                }
            }
        }
        private decimal _todayAccrual;
        [DataMember]
        public decimal TodayRealisedPricePnl
        {	
    		
            get { return _todayRealisedPricePnl; }
            set
            {
                if (_todayRealisedPricePnl != value)
                {
                    ChangeTracker.RecordOriginalValue("TodayRealisedPricePnl", _todayRealisedPricePnl);
                    _todayRealisedPricePnl = value;
                    OnPropertyChanged("TodayRealisedPricePnl");
                }
            }
        }
        private decimal _todayRealisedPricePnl;
        [DataMember]
        public decimal TodayRealisedFxPnl
        {	
    		
            get { return _todayRealisedFxPnl; }
            set
            {
                if (_todayRealisedFxPnl != value)
                {
                    ChangeTracker.RecordOriginalValue("TodayRealisedFxPnl", _todayRealisedFxPnl);
                    _todayRealisedFxPnl = value;
                    OnPropertyChanged("TodayRealisedFxPnl");
                }
            }
        }
        private decimal _todayRealisedFxPnl;
        [DataMember]
        public decimal TotalAccrual
        {	
    		
            get { return _totalAccrual; }
            set
            {
                if (_totalAccrual != value)
                {
                    ChangeTracker.RecordOriginalValue("TotalAccrual", _totalAccrual);
                    _totalAccrual = value;
                    OnPropertyChanged("TotalAccrual");
                }
            }
        }
        private decimal _totalAccrual;
        [DataMember]
        public decimal TodayRealisedPricePnlBookCurrency
        {	
    		
            get { return _todayRealisedPricePnlBookCurrency; }
            set
            {
                if (_todayRealisedPricePnlBookCurrency != value)
                {
                    ChangeTracker.RecordOriginalValue("TodayRealisedPricePnlBookCurrency", _todayRealisedPricePnlBookCurrency);
                    _todayRealisedPricePnlBookCurrency = value;
                    OnPropertyChanged("TodayRealisedPricePnlBookCurrency");
                }
            }
        }
        private decimal _todayRealisedPricePnlBookCurrency;
        [DataMember]
        public decimal MarketValue
        {	
    		
            get { return _marketValue; }
            set
            {
                if (_marketValue != value)
                {
                    ChangeTracker.RecordOriginalValue("MarketValue", _marketValue);
                    _marketValue = value;
                    OnPropertyChanged("MarketValue");
                }
            }
        }
        private decimal _marketValue;
        [DataMember]
        public decimal Price
        {	
    		
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    ChangeTracker.RecordOriginalValue("Price", _price);
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        private decimal _price;
        [DataMember]
        public Nullable<int> PriceId
        {	
    		
            get { return _priceId; }
            set
            {
                if (_priceId != value)
                {
                    ChangeTracker.RecordOriginalValue("PriceId", _priceId);
                    _priceId = value;
                    OnPropertyChanged("PriceId");
                }
            }
        }
        private Nullable<int> _priceId;
        [DataMember]
        public decimal FXRate
        {	
    		
            get { return _fXRate; }
            set
            {
                if (_fXRate != value)
                {
                    ChangeTracker.RecordOriginalValue("FXRate", _fXRate);
                    _fXRate = value;
                    OnPropertyChanged("FXRate");
                }
            }
        }
        private decimal _fXRate;
        [DataMember]
        public Nullable<int> FXRateId
        {	
    		
            get { return _fXRateId; }
            set
            {
                if (_fXRateId != value)
                {
                    ChangeTracker.RecordOriginalValue("FXRateId", _fXRateId);
                    _fXRateId = value;
                    OnPropertyChanged("FXRateId");
                }
            }
        }
        private Nullable<int> _fXRateId;
        [DataMember]
        public decimal DeltaMarketValue
        {	
    		
            get { return _deltaMarketValue; }
            set
            {
                if (_deltaMarketValue != value)
                {
                    ChangeTracker.RecordOriginalValue("DeltaMarketValue", _deltaMarketValue);
                    _deltaMarketValue = value;
                    OnPropertyChanged("DeltaMarketValue");
                }
            }
        }
        private decimal _deltaMarketValue;
        [DataMember]
        public decimal TodayUnrealisedFXPnl
        {	
    		
            get { return _todayUnrealisedFXPnl; }
            set
            {
                if (_todayUnrealisedFXPnl != value)
                {
                    ChangeTracker.RecordOriginalValue("TodayUnrealisedFXPnl", _todayUnrealisedFXPnl);
                    _todayUnrealisedFXPnl = value;
                    OnPropertyChanged("TodayUnrealisedFXPnl");
                }
            }
        }
        private decimal _todayUnrealisedFXPnl;
        [DataMember]
        public decimal TodayUnrealisedPricePnl
        {	
    		
            get { return _todayUnrealisedPricePnl; }
            set
            {
                if (_todayUnrealisedPricePnl != value)
                {
                    ChangeTracker.RecordOriginalValue("TodayUnrealisedPricePnl", _todayUnrealisedPricePnl);
                    _todayUnrealisedPricePnl = value;
                    OnPropertyChanged("TodayUnrealisedPricePnl");
                }
            }
        }
        private decimal _todayUnrealisedPricePnl;
        [DataMember]
        public decimal PriceToPositionFXRate
        {	
    		
            get { return _priceToPositionFXRate; }
            set
            {
                if (_priceToPositionFXRate != value)
                {
                    ChangeTracker.RecordOriginalValue("PriceToPositionFXRate", _priceToPositionFXRate);
                    _priceToPositionFXRate = value;
                    OnPropertyChanged("PriceToPositionFXRate");
                }
            }
        }
        private decimal _priceToPositionFXRate;
        [DataMember]
        public Nullable<int> PriceToPositionFXRateId
        {	
    		
            get { return _priceToPositionFXRateId; }
            set
            {
                if (_priceToPositionFXRateId != value)
                {
                    ChangeTracker.RecordOriginalValue("PriceToPositionFXRateId", _priceToPositionFXRateId);
                    _priceToPositionFXRateId = value;
                    OnPropertyChanged("PriceToPositionFXRateId");
                }
            }
        }
        private Nullable<int> _priceToPositionFXRateId;
        [DataMember]
        public bool PriceIsLastTradePrice
        {	
    		
            get { return _priceIsLastTradePrice; }
            set
            {
                if (_priceIsLastTradePrice != value)
                {
                    ChangeTracker.RecordOriginalValue("PriceIsLastTradePrice", _priceIsLastTradePrice);
                    _priceIsLastTradePrice = value;
                    OnPropertyChanged("PriceIsLastTradePrice");
                }
            }
        }
        private bool _priceIsLastTradePrice;
        [DataMember]
        public Nullable<int> PreviousPortfolioId
        {	
    		
            get { return _previousPortfolioId; }
            set
            {
                if (_previousPortfolioId != value)
                {
                    ChangeTracker.RecordOriginalValue("PreviousPortfolioId", _previousPortfolioId);
                    if (!IsDeserializing)
                    {
                        if (PreviousPortfolio != null && PreviousPortfolio.PortfolioId != value)
                        {
                            PreviousPortfolio = null;
                        }
                    }
                    _previousPortfolioId = value;
                    OnPropertyChanged("PreviousPortfolioId");
                }
            }
        }
        private Nullable<int> _previousPortfolioId;
        [DataMember]
        public Nullable<decimal> BondNominal
        {	
    		
            get { return _bondNominal; }
            set
            {
                if (_bondNominal != value)
                {
                    ChangeTracker.RecordOriginalValue("BondNominal", _bondNominal);
                    _bondNominal = value;
                    OnPropertyChanged("BondNominal");
                }
            }
        }
        private Nullable<decimal> _bondNominal;
        [DataMember]
        public Nullable<decimal> TodayCarryAccrual
        {	
    		
            get { return _todayCarryAccrual; }
            set
            {
                if (_todayCarryAccrual != value)
                {
                    ChangeTracker.RecordOriginalValue("TodayCarryAccrual", _todayCarryAccrual);
                    _todayCarryAccrual = value;
                    OnPropertyChanged("TodayCarryAccrual");
                }
            }
        }
        private Nullable<decimal> _todayCarryAccrual;
        [DataMember]
        public Nullable<decimal> Delta
        {	
    		
            get { return _delta; }
            set
            {
                if (_delta != value)
                {
                    ChangeTracker.RecordOriginalValue("Delta", _delta);
                    _delta = value;
                    OnPropertyChanged("Delta");
                }
            }
        }
        private Nullable<decimal> _delta;
        [DataMember]
        public Nullable<decimal> UnderlyingPrice
        {	
    		
            get { return _underlyingPrice; }
            set
            {
                if (_underlyingPrice != value)
                {
                    ChangeTracker.RecordOriginalValue("UnderlyingPrice", _underlyingPrice);
                    _underlyingPrice = value;
                    OnPropertyChanged("UnderlyingPrice");
                }
            }
        }
        private Nullable<decimal> _underlyingPrice;
        [DataMember]
        public Nullable<int> DeltaId
        {	
    		
            get { return _deltaId; }
            set
            {
                if (_deltaId != value)
                {
                    ChangeTracker.RecordOriginalValue("DeltaId", _deltaId);
                    _deltaId = value;
                    OnPropertyChanged("DeltaId");
                }
            }
        }
        private Nullable<int> _deltaId;
        [DataMember]
        public Nullable<int> UnderlyingPriceId
        {	
    		
            get { return _underlyingPriceId; }
            set
            {
                if (_underlyingPriceId != value)
                {
                    ChangeTracker.RecordOriginalValue("UnderlyingPriceId", _underlyingPriceId);
                    _underlyingPriceId = value;
                    OnPropertyChanged("UnderlyingPriceId");
                }
            }
        }
        private Nullable<int> _underlyingPriceId;
        [DataMember]
        public Nullable<decimal> UnderlyingPriceToPositionFXRate
        {	
    		
            get { return _underlyingPriceToPositionFXRate; }
            set
            {
                if (_underlyingPriceToPositionFXRate != value)
                {
                    ChangeTracker.RecordOriginalValue("UnderlyingPriceToPositionFXRate", _underlyingPriceToPositionFXRate);
                    _underlyingPriceToPositionFXRate = value;
                    OnPropertyChanged("UnderlyingPriceToPositionFXRate");
                }
            }
        }
        private Nullable<decimal> _underlyingPriceToPositionFXRate;
        [DataMember]
        public Nullable<int> UnderlyingPriceToPositionFXRateId
        {	
    		
            get { return _underlyingPriceToPositionFXRateId; }
            set
            {
                if (_underlyingPriceToPositionFXRateId != value)
                {
                    ChangeTracker.RecordOriginalValue("UnderlyingPriceToPositionFXRateId", _underlyingPriceToPositionFXRateId);
                    if (!IsDeserializing)
                    {
                        if (FXRate3 != null && FXRate3.FXRateId != value)
                        {
                            FXRate3 = null;
                        }
                    }
                    _underlyingPriceToPositionFXRateId = value;
                    OnPropertyChanged("UnderlyingPriceToPositionFXRateId");
                }
            }
        }
        private Nullable<int> _underlyingPriceToPositionFXRateId;
        [DataMember]
        public decimal ValuationFXRate
        {	
    		
            get { return _valuationFXRate; }
            set
            {
                if (_valuationFXRate != value)
                {
                    ChangeTracker.RecordOriginalValue("ValuationFXRate", _valuationFXRate);
                    _valuationFXRate = value;
                    OnPropertyChanged("ValuationFXRate");
                }
            }
        }
        private decimal _valuationFXRate;
        [DataMember]
        public decimal ValuationNetPosition
        {	
    		
            get { return _valuationNetPosition; }
            set
            {
                if (_valuationNetPosition != value)
                {
                    ChangeTracker.RecordOriginalValue("ValuationNetPosition", _valuationNetPosition);
                    _valuationNetPosition = value;
                    OnPropertyChanged("ValuationNetPosition");
                }
            }
        }
        private decimal _valuationNetPosition;
        [DataMember]
        public decimal ValuationDeltaNetCostInstrumentCurrency
        {	
    		
            get { return _valuationDeltaNetCostInstrumentCurrency; }
            set
            {
                if (_valuationDeltaNetCostInstrumentCurrency != value)
                {
                    ChangeTracker.RecordOriginalValue("ValuationDeltaNetCostInstrumentCurrency", _valuationDeltaNetCostInstrumentCurrency);
                    _valuationDeltaNetCostInstrumentCurrency = value;
                    OnPropertyChanged("ValuationDeltaNetCostInstrumentCurrency");
                }
            }
        }
        private decimal _valuationDeltaNetCostInstrumentCurrency;
        [DataMember]
        public decimal ValuationPrice
        {	
    		
            get { return _valuationPrice; }
            set
            {
                if (_valuationPrice != value)
                {
                    ChangeTracker.RecordOriginalValue("ValuationPrice", _valuationPrice);
                    _valuationPrice = value;
                    OnPropertyChanged("ValuationPrice");
                }
            }
        }
        private decimal _valuationPrice;
        [DataMember]
        public decimal ValuationPriceToPositionFXRate
        {	
    		
            get { return _valuationPriceToPositionFXRate; }
            set
            {
                if (_valuationPriceToPositionFXRate != value)
                {
                    ChangeTracker.RecordOriginalValue("ValuationPriceToPositionFXRate", _valuationPriceToPositionFXRate);
                    _valuationPriceToPositionFXRate = value;
                    OnPropertyChanged("ValuationPriceToPositionFXRate");
                }
            }
        }
        private decimal _valuationPriceToPositionFXRate;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Position Position
        {
            get { return _position; }
            set
            {
                if (!ReferenceEquals(_position, value))
                {
                    var previousValue = _position;
                    _position = value;
                    FixupPosition(previousValue);
                    OnNavigationPropertyChanged("Position");
                }
            }
        }
        private Position _position;
    
        [DataMember]
        public Portfolio PreviousPortfolio
        {
            get { return _previousPortfolio; }
            set
            {
                if (!ReferenceEquals(_previousPortfolio, value))
                {
                    var previousValue = _previousPortfolio;
                    _previousPortfolio = value;
                    FixupPreviousPortfolio(previousValue);
                    OnNavigationPropertyChanged("PreviousPortfolio");
                }
            }
        }
        private Portfolio _previousPortfolio;
    
        [DataMember]
        public FXRate FXRate3
        {
            get { return _fXRate3; }
            set
            {
                if (!ReferenceEquals(_fXRate3, value))
                {
                    var previousValue = _fXRate3;
                    _fXRate3 = value;
                    FixupFXRate3(previousValue);
                    OnNavigationPropertyChanged("FXRate3");
                }
            }
        }
        private FXRate _fXRate3;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Position = null;
            PreviousPortfolio = null;
            FXRate3 = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupPosition(Position previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (Position != null)
            {
                PositionId = Position.PositionId;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Position")
                    && (ChangeTracker.OriginalValues["Position"] == Position))
                {
                    ChangeTracker.OriginalValues.Remove("Position");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Position", previousValue);
                }
                if (Position != null && !Position.ChangeTracker.ChangeTrackingEnabled)
                {
                    Position.StartTracking();
                }
            }
        }
    
        private void FixupPreviousPortfolio(Portfolio previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (PreviousPortfolio != null)
            {
                PreviousPortfolioId = PreviousPortfolio.PortfolioId;
            }
    
            else if (!skipKeys)
            {
                PreviousPortfolioId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PreviousPortfolio")
                    && (ChangeTracker.OriginalValues["PreviousPortfolio"] == PreviousPortfolio))
                {
                    ChangeTracker.OriginalValues.Remove("PreviousPortfolio");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PreviousPortfolio", previousValue);
                }
                if (PreviousPortfolio != null && !PreviousPortfolio.ChangeTracker.ChangeTrackingEnabled)
                {
                    PreviousPortfolio.StartTracking();
                }
            }
        }
    
        private void FixupFXRate3(FXRate previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Portfolios2.Contains(this))
            {
                previousValue.Portfolios2.Remove(this);
            }
    
            if (FXRate3 != null)
            {
                if (!FXRate3.Portfolios2.Contains(this))
                {
                    FXRate3.Portfolios2.Add(this);
                }
    
                UnderlyingPriceToPositionFXRateId = FXRate3.FXRateId;
            }
            else if (!skipKeys)
            {
                UnderlyingPriceToPositionFXRateId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FXRate3")
                    && (ChangeTracker.OriginalValues["FXRate3"] == FXRate3))
                {
                    ChangeTracker.OriginalValues.Remove("FXRate3");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FXRate3", previousValue);
                }
                if (FXRate3 != null && !FXRate3.ChangeTracker.ChangeTrackingEnabled)
                {
                    FXRate3.StartTracking();
                }
            }
        }

        #endregion
    }
}
