//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Odey.Framework.Keeley.Entities
{
    [DataContract(IsReference = true)]
    public partial class Portfolio: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
        [DataMember]
        public int PortfolioID
        {	
    		
            get { return _portfolioID; }
            set
            {
                if (_portfolioID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PortfolioID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _portfolioID = value;
                    OnPropertyChanged("PortfolioID");
                }
            }
        }
        private int _portfolioID;
        [DataMember]
        public int PositionID
        {	
    		
            get { return _positionID; }
            set
            {
                if (_positionID != value)
                {
                    ChangeTracker.RecordOriginalValue("PositionID", _positionID);
                    _positionID = value;
                    OnPropertyChanged("PositionID");
                }
            }
        }
        private int _positionID;
        [DataMember]
        public System.DateTime ReferenceDate
        {	
    		
            get { return _referenceDate; }
            set
            {
                if (_referenceDate != value)
                {
                    _referenceDate = value;
                    OnPropertyChanged("ReferenceDate");
                }
            }
        }
        private System.DateTime _referenceDate;
        [DataMember]
        public decimal NetPosition
        {	
    		
            get { return _netPosition; }
            set
            {
                if (_netPosition != value)
                {
                    _netPosition = value;
                    OnPropertyChanged("NetPosition");
                }
            }
        }
        private decimal _netPosition;
        [DataMember]
        public decimal UnitCost
        {	
    		
            get { return _unitCost; }
            set
            {
                if (_unitCost != value)
                {
                    _unitCost = value;
                    OnPropertyChanged("UnitCost");
                }
            }
        }
        private decimal _unitCost;
        [DataMember]
        public decimal MarkPrice
        {	
    		
            get { return _markPrice; }
            set
            {
                if (_markPrice != value)
                {
                    _markPrice = value;
                    OnPropertyChanged("MarkPrice");
                }
            }
        }
        private decimal _markPrice;
        [DataMember]
        public decimal FXRate
        {	
    		
            get { return _fXRate; }
            set
            {
                if (_fXRate != value)
                {
                    _fXRate = value;
                    OnPropertyChanged("FXRate");
                }
            }
        }
        private decimal _fXRate;
        [DataMember]
        public decimal MarketValue
        {	
    		
            get { return _marketValue; }
            set
            {
                if (_marketValue != value)
                {
                    _marketValue = value;
                    OnPropertyChanged("MarketValue");
                }
            }
        }
        private decimal _marketValue;
        [DataMember]
        public decimal DeltaEquityPosition
        {	
    		
            get { return _deltaEquityPosition; }
            set
            {
                if (_deltaEquityPosition != value)
                {
                    _deltaEquityPosition = value;
                    OnPropertyChanged("DeltaEquityPosition");
                }
            }
        }
        private decimal _deltaEquityPosition;
        [DataMember]
        public decimal RealisedFXPNL
        {	
    		
            get { return _realisedFXPNL; }
            set
            {
                if (_realisedFXPNL != value)
                {
                    _realisedFXPNL = value;
                    OnPropertyChanged("RealisedFXPNL");
                }
            }
        }
        private decimal _realisedFXPNL;
        [DataMember]
        public decimal UnRealisedFXPNL
        {	
    		
            get { return _unRealisedFXPNL; }
            set
            {
                if (_unRealisedFXPNL != value)
                {
                    _unRealisedFXPNL = value;
                    OnPropertyChanged("UnRealisedFXPNL");
                }
            }
        }
        private decimal _unRealisedFXPNL;
        [DataMember]
        public decimal RealisedPricePNL
        {	
    		
            get { return _realisedPricePNL; }
            set
            {
                if (_realisedPricePNL != value)
                {
                    _realisedPricePNL = value;
                    OnPropertyChanged("RealisedPricePNL");
                }
            }
        }
        private decimal _realisedPricePNL;
        [DataMember]
        public decimal UnRealisedPricePNL
        {	
    		
            get { return _unRealisedPricePNL; }
            set
            {
                if (_unRealisedPricePNL != value)
                {
                    _unRealisedPricePNL = value;
                    OnPropertyChanged("UnRealisedPricePNL");
                }
            }
        }
        private decimal _unRealisedPricePNL;
        [DataMember]
        public decimal Accrual
        {	
    		
            get { return _accrual; }
            set
            {
                if (_accrual != value)
                {
                    _accrual = value;
                    OnPropertyChanged("Accrual");
                }
            }
        }
        private decimal _accrual;
        [DataMember]
        public decimal CashIncome
        {	
    		
            get { return _cashIncome; }
            set
            {
                if (_cashIncome != value)
                {
                    _cashIncome = value;
                    OnPropertyChanged("CashIncome");
                }
            }
        }
        private decimal _cashIncome;
        [DataMember]
        public System.DateTime StartDt
        {	
    		
            get { return _startDt; }
            private set
            {
                if (_startDt != value)
                {
                    _startDt = value;
                    OnPropertyChanged("StartDt");
                }
            }
        }
        private System.DateTime _startDt;
        [DataMember]
        public int UpdateUserID
        {	
    		
            get { return _updateUserID; }
            private set
            {
                if (_updateUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateUserID", _updateUserID);
                    _updateUserID = value;
                    OnPropertyChanged("UpdateUserID");
                }
            }
        }
        private int _updateUserID;
        [DataMember]
        private byte[] DataVersion
        {	
    		
            get { return _dataVersion; }
            set
            {
                if (_dataVersion != value)
                {
                    ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
                    _dataVersion = value;
                    OnPropertyChanged("DataVersion");
                }
            }
        }
        private byte[] _dataVersion;
        [DataMember]
        public Nullable<int> FMContViewLadderID
        {	
    		
            get { return _fMContViewLadderID; }
            set
            {
                if (_fMContViewLadderID != value)
                {
                    _fMContViewLadderID = value;
                    OnPropertyChanged("FMContViewLadderID");
                }
            }
        }
        private Nullable<int> _fMContViewLadderID;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
