//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Odey.Framework.Keeley.Entities
{
    [DataContract(IsReference = true)]
    public partial class ExtractEventFieldValue: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
        [DataMember]
        public int ExtractEventFieldValueID
        {	
    		
            get { return _extractEventFieldValueID; }
            set
            {
                if (_extractEventFieldValueID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ExtractEventFieldValueID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _extractEventFieldValueID = value;
                    OnPropertyChanged("ExtractEventFieldValueID");
                }
            }
        }
        private int _extractEventFieldValueID;
        [DataMember]
        public int ExtractEventID
        {	
    		
            get { return _extractEventID; }
            set
            {
                if (_extractEventID != value)
                {
                    ChangeTracker.RecordOriginalValue("ExtractEventID", _extractEventID);
                    _extractEventID = value;
                    OnPropertyChanged("ExtractEventID");
                }
            }
        }
        private int _extractEventID;
        [DataMember]
        public int EventFieldId
        {	
    		
            get { return _eventFieldId; }
            set
            {
                if (_eventFieldId != value)
                {
                    ChangeTracker.RecordOriginalValue("EventFieldId", _eventFieldId);
                    _eventFieldId = value;
                    OnPropertyChanged("EventFieldId");
                }
            }
        }
        private int _eventFieldId;
        [DataMember]
        public Nullable<int> EventFieldIntValue
        {	
    		
            get { return _eventFieldIntValue; }
            set
            {
                if (_eventFieldIntValue != value)
                {
                    _eventFieldIntValue = value;
                    OnPropertyChanged("EventFieldIntValue");
                }
            }
        }
        private Nullable<int> _eventFieldIntValue;
        [DataMember]
        public Nullable<decimal> EventFieldDecimalValue
        {	
    		
            get { return _eventFieldDecimalValue; }
            set
            {
                if (_eventFieldDecimalValue != value)
                {
                    _eventFieldDecimalValue = value;
                    OnPropertyChanged("EventFieldDecimalValue");
                }
            }
        }
        private Nullable<decimal> _eventFieldDecimalValue;
        [DataMember]
        public Nullable<System.DateTime> EventFieldDateTimeValue
        {	
    		
            get { return _eventFieldDateTimeValue; }
            set
            {
                if (_eventFieldDateTimeValue != value)
                {
                    _eventFieldDateTimeValue = value;
                    OnPropertyChanged("EventFieldDateTimeValue");
                }
            }
        }
        private Nullable<System.DateTime> _eventFieldDateTimeValue;
        [DataMember]
        public Nullable<bool> EventFieldBitValue
        {	
    		
            get { return _eventFieldBitValue; }
            set
            {
                if (_eventFieldBitValue != value)
                {
                    _eventFieldBitValue = value;
                    OnPropertyChanged("EventFieldBitValue");
                }
            }
        }
        private Nullable<bool> _eventFieldBitValue;
        [DataMember]
        public System.DateTime StartDt
        {	
    		
            get { return _startDt; }
            private set
            {
                if (_startDt != value)
                {
                    _startDt = value;
                    OnPropertyChanged("StartDt");
                }
            }
        }
        private System.DateTime _startDt;
        [DataMember]
        public int UpdateUserID
        {	
    		
            get { return _updateUserID; }
            private set
            {
                if (_updateUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateUserID", _updateUserID);
                    _updateUserID = value;
                    OnPropertyChanged("UpdateUserID");
                }
            }
        }
        private int _updateUserID;
        [DataMember]
        private byte[] DataVersion
        {	
    		
            get { return _dataVersion; }
            set
            {
                if (_dataVersion != value)
                {
                    _dataVersion = value;
                    OnPropertyChanged("DataVersion");
                }
            }
        }
        private byte[] _dataVersion;
        [DataMember]
        public string EventFieldStringValue
        {	
    		
            get { return _eventFieldStringValue; }
            set
            {
                if (_eventFieldStringValue != value)
                {
                    _eventFieldStringValue = value;
                    OnPropertyChanged("EventFieldStringValue");
                }
            }
        }
        private string _eventFieldStringValue;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
