//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Odey.Framework.Keeley.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Currency))]
    public partial class ForwardFX: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
        [DataMember]
        public int InstrumentId
        {	
    		
            get { return _instrumentId; }
            set
            {
                if (_instrumentId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'InstrumentId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _instrumentId = value;
                    OnPropertyChanged("InstrumentId");
                }
            }
        }
        private int _instrumentId;
        [DataMember]
        public int BaseCurrencyId
        {	
    		
            get { return _baseCurrencyId; }
            set
            {
                if (_baseCurrencyId != value)
                {
                    ChangeTracker.RecordOriginalValue("BaseCurrencyId", _baseCurrencyId);
                    if (!IsDeserializing)
                    {
                        if (BaseCurrency != null && BaseCurrency.InstrumentID != value)
                        {
                            BaseCurrency = null;
                        }
                    }
                    _baseCurrencyId = value;
                    OnPropertyChanged("BaseCurrencyId");
                }
            }
        }
        private int _baseCurrencyId;
        [DataMember]
        public int ContraCurrencyId
        {	
    		
            get { return _contraCurrencyId; }
            set
            {
                if (_contraCurrencyId != value)
                {
                    ChangeTracker.RecordOriginalValue("ContraCurrencyId", _contraCurrencyId);
                    if (!IsDeserializing)
                    {
                        if (ContraCurrency != null && ContraCurrency.InstrumentID != value)
                        {
                            ContraCurrency = null;
                        }
                    }
                    _contraCurrencyId = value;
                    OnPropertyChanged("ContraCurrencyId");
                }
            }
        }
        private int _contraCurrencyId;
        [DataMember]
        public bool IsProp
        {	
    		
            get { return _isProp; }
            set
            {
                if (_isProp != value)
                {
                    ChangeTracker.RecordOriginalValue("IsProp", _isProp);
                    _isProp = value;
                    OnPropertyChanged("IsProp");
                }
            }
        }
        private bool _isProp;
        [DataMember]
        public System.DateTime MaturityDate
        {	
    		
            get { return _maturityDate; }
            set
            {
                if (_maturityDate != value)
                {
                    ChangeTracker.RecordOriginalValue("MaturityDate", _maturityDate);
                    _maturityDate = value;
                    OnPropertyChanged("MaturityDate");
                }
            }
        }
        private System.DateTime _maturityDate;
        [DataMember]
        public System.DateTime StartDt
        {	
    		
            get { return _startDt; }
            private set
            {
                if (_startDt != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDt", _startDt);
                    _startDt = value;
                    OnPropertyChanged("StartDt");
                }
            }
        }
        private System.DateTime _startDt;
        [DataMember]
        public int UpdateUserID
        {	
    		
            get { return _updateUserID; }
            private set
            {
                if (_updateUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateUserID", _updateUserID);
                    _updateUserID = value;
                    OnPropertyChanged("UpdateUserID");
                }
            }
        }
        private int _updateUserID;
        [DataMember]
        private byte[] DataVersion
        {	
    		
            get { return _dataVersion; }
            set
            {
                if (_dataVersion != value)
                {
                    ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
                    _dataVersion = value;
                    OnPropertyChanged("DataVersion");
                }
            }
        }
        private byte[] _dataVersion;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Currency BaseCurrency
        {
            get { return _baseCurrency; }
            set
            {
                if (!ReferenceEquals(_baseCurrency, value))
                {
                    var previousValue = _baseCurrency;
                    _baseCurrency = value;
                    FixupBaseCurrency(previousValue);
                    OnNavigationPropertyChanged("BaseCurrency");
                }
            }
        }
        private Currency _baseCurrency;
    
        [DataMember]
        public Currency ContraCurrency
        {
            get { return _contraCurrency; }
            set
            {
                if (!ReferenceEquals(_contraCurrency, value))
                {
                    var previousValue = _contraCurrency;
                    _contraCurrency = value;
                    FixupContraCurrency(previousValue);
                    OnNavigationPropertyChanged("ContraCurrency");
                }
            }
        }
        private Currency _contraCurrency;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            BaseCurrency = null;
            ContraCurrency = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupBaseCurrency(Currency previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (BaseCurrency != null)
            {
                BaseCurrencyId = BaseCurrency.InstrumentID;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaseCurrency")
                    && (ChangeTracker.OriginalValues["BaseCurrency"] == BaseCurrency))
                {
                    ChangeTracker.OriginalValues.Remove("BaseCurrency");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaseCurrency", previousValue);
                }
                if (BaseCurrency != null && !BaseCurrency.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaseCurrency.StartTracking();
                }
            }
        }
    
        private void FixupContraCurrency(Currency previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ContraCurrency != null)
            {
                ContraCurrencyId = ContraCurrency.InstrumentID;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ContraCurrency")
                    && (ChangeTracker.OriginalValues["ContraCurrency"] == ContraCurrency))
                {
                    ChangeTracker.OriginalValues.Remove("ContraCurrency");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ContraCurrency", previousValue);
                }
                if (ContraCurrency != null && !ContraCurrency.ChangeTracker.ChangeTrackingEnabled)
                {
                    ContraCurrency.StartTracking();
                }
            }
        }

        #endregion
    }
}
