//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Odey.Framework.Keeley.Entities
{
    [DataContract(IsReference = true)]
    public partial class PortfolioPositionAccountMovement: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
        [DataMember]
        public int PortfolioPositionAccountMovementID
        {	
    		
            get { return _portfolioPositionAccountMovementID; }
            set
            {
                if (_portfolioPositionAccountMovementID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PortfolioPositionAccountMovementID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _portfolioPositionAccountMovementID = value;
                    OnPropertyChanged("PortfolioPositionAccountMovementID");
                }
            }
        }
        private int _portfolioPositionAccountMovementID;
        [DataMember]
        public int PositionAccountMovementId
        {	
    		
            get { return _positionAccountMovementId; }
            set
            {
                if (_positionAccountMovementId != value)
                {
                    ChangeTracker.RecordOriginalValue("PositionAccountMovementId", _positionAccountMovementId);
                    _positionAccountMovementId = value;
                    OnPropertyChanged("PositionAccountMovementId");
                }
            }
        }
        private int _positionAccountMovementId;
        [DataMember]
        public int PositionAccountId
        {	
    		
            get { return _positionAccountId; }
            set
            {
                if (_positionAccountId != value)
                {
                    ChangeTracker.RecordOriginalValue("PositionAccountId", _positionAccountId);
                    _positionAccountId = value;
                    OnPropertyChanged("PositionAccountId");
                }
            }
        }
        private int _positionAccountId;
        [DataMember]
        public System.DateTime ReferenceDate
        {	
    		
            get { return _referenceDate; }
            set
            {
                if (_referenceDate != value)
                {
                    _referenceDate = value;
                    OnPropertyChanged("ReferenceDate");
                }
            }
        }
        private System.DateTime _referenceDate;
        [DataMember]
        public int PortfolioAggregationLevelId
        {	
    		
            get { return _portfolioAggregationLevelId; }
            set
            {
                if (_portfolioAggregationLevelId != value)
                {
                    ChangeTracker.RecordOriginalValue("PortfolioAggregationLevelId", _portfolioAggregationLevelId);
                    _portfolioAggregationLevelId = value;
                    OnPropertyChanged("PortfolioAggregationLevelId");
                }
            }
        }
        private int _portfolioAggregationLevelId;
        [DataMember]
        public int ChangeNumber
        {	
    		
            get { return _changeNumber; }
            set
            {
                if (_changeNumber != value)
                {
                    _changeNumber = value;
                    OnPropertyChanged("ChangeNumber");
                }
            }
        }
        private int _changeNumber;
        [DataMember]
        public decimal NetPosition
        {	
    		
            get { return _netPosition; }
            set
            {
                if (_netPosition != value)
                {
                    _netPosition = value;
                    OnPropertyChanged("NetPosition");
                }
            }
        }
        private decimal _netPosition;
        [DataMember]
        public System.DateTime StartDt
        {	
    		
            get { return _startDt; }
            private set
            {
                if (_startDt != value)
                {
                    _startDt = value;
                    OnPropertyChanged("StartDt");
                }
            }
        }
        private System.DateTime _startDt;
        [DataMember]
        public int UpdateUserID
        {	
    		
            get { return _updateUserID; }
            private set
            {
                if (_updateUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateUserID", _updateUserID);
                    _updateUserID = value;
                    OnPropertyChanged("UpdateUserID");
                }
            }
        }
        private int _updateUserID;
        [DataMember]
        private byte[] DataVersion
        {	
    		
            get { return _dataVersion; }
            set
            {
                if (_dataVersion != value)
                {
                    ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
                    _dataVersion = value;
                    OnPropertyChanged("DataVersion");
                }
            }
        }
        private byte[] _dataVersion;
        [DataMember]
        public decimal Quantity
        {	
    		
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    OnPropertyChanged("Quantity");
                }
            }
        }
        private decimal _quantity;
        [DataMember]
        public decimal FXRate
        {	
    		
            get { return _fXRate; }
            set
            {
                if (_fXRate != value)
                {
                    _fXRate = value;
                    OnPropertyChanged("FXRate");
                }
            }
        }
        private decimal _fXRate;
        [DataMember]
        public decimal Price
        {	
    		
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        private decimal _price;
        [DataMember]
        public decimal NetCostChangeInstrumentCurrency
        {	
    		
            get { return _netCostChangeInstrumentCurrency; }
            set
            {
                if (_netCostChangeInstrumentCurrency != value)
                {
                    _netCostChangeInstrumentCurrency = value;
                    OnPropertyChanged("NetCostChangeInstrumentCurrency");
                }
            }
        }
        private decimal _netCostChangeInstrumentCurrency;
        [DataMember]
        public decimal NetCostChangeBookCurrency
        {	
    		
            get { return _netCostChangeBookCurrency; }
            set
            {
                if (_netCostChangeBookCurrency != value)
                {
                    _netCostChangeBookCurrency = value;
                    OnPropertyChanged("NetCostChangeBookCurrency");
                }
            }
        }
        private decimal _netCostChangeBookCurrency;
        [DataMember]
        public decimal NetCostInstrumentCurrency
        {	
    		
            get { return _netCostInstrumentCurrency; }
            set
            {
                if (_netCostInstrumentCurrency != value)
                {
                    _netCostInstrumentCurrency = value;
                    OnPropertyChanged("NetCostInstrumentCurrency");
                }
            }
        }
        private decimal _netCostInstrumentCurrency;
        [DataMember]
        public decimal NetCostBookCurrency
        {	
    		
            get { return _netCostBookCurrency; }
            set
            {
                if (_netCostBookCurrency != value)
                {
                    _netCostBookCurrency = value;
                    OnPropertyChanged("NetCostBookCurrency");
                }
            }
        }
        private decimal _netCostBookCurrency;
        [DataMember]
        public decimal DeltaNetCostChangeInstrumentCurrency
        {	
    		
            get { return _deltaNetCostChangeInstrumentCurrency; }
            set
            {
                if (_deltaNetCostChangeInstrumentCurrency != value)
                {
                    _deltaNetCostChangeInstrumentCurrency = value;
                    OnPropertyChanged("DeltaNetCostChangeInstrumentCurrency");
                }
            }
        }
        private decimal _deltaNetCostChangeInstrumentCurrency;
        [DataMember]
        public decimal DeltaNetCostChangeBookCurrency
        {	
    		
            get { return _deltaNetCostChangeBookCurrency; }
            set
            {
                if (_deltaNetCostChangeBookCurrency != value)
                {
                    _deltaNetCostChangeBookCurrency = value;
                    OnPropertyChanged("DeltaNetCostChangeBookCurrency");
                }
            }
        }
        private decimal _deltaNetCostChangeBookCurrency;
        [DataMember]
        public decimal DeltaNetCostInstrumentCurrency
        {	
    		
            get { return _deltaNetCostInstrumentCurrency; }
            set
            {
                if (_deltaNetCostInstrumentCurrency != value)
                {
                    _deltaNetCostInstrumentCurrency = value;
                    OnPropertyChanged("DeltaNetCostInstrumentCurrency");
                }
            }
        }
        private decimal _deltaNetCostInstrumentCurrency;
        [DataMember]
        public decimal DeltaNetCostBookCurrency
        {	
    		
            get { return _deltaNetCostBookCurrency; }
            set
            {
                if (_deltaNetCostBookCurrency != value)
                {
                    _deltaNetCostBookCurrency = value;
                    OnPropertyChanged("DeltaNetCostBookCurrency");
                }
            }
        }
        private decimal _deltaNetCostBookCurrency;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
