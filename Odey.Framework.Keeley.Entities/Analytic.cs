//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Odey.Framework.Keeley.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(RawAnalytic))]
    public partial class Analytic: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
        [DataMember]
        public int AnalyticId
        {	
    		
            get { return _analyticId; }
            set
            {
                if (_analyticId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'AnalyticId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _analyticId = value;
                    OnPropertyChanged("AnalyticId");
                }
            }
        }
        private int _analyticId;
        [DataMember]
        public int AnalyticTypeID
        {	
    		
            get { return _analyticTypeID; }
            set
            {
                if (_analyticTypeID != value)
                {
                    ChangeTracker.RecordOriginalValue("AnalyticTypeID", _analyticTypeID);
                    _analyticTypeID = value;
                    OnPropertyChanged("AnalyticTypeID");
                }
            }
        }
        private int _analyticTypeID;
        [DataMember]
        public int InstrumentMarketId
        {	
    		
            get { return _instrumentMarketId; }
            set
            {
                if (_instrumentMarketId != value)
                {
                    ChangeTracker.RecordOriginalValue("InstrumentMarketId", _instrumentMarketId);
                    _instrumentMarketId = value;
                    OnPropertyChanged("InstrumentMarketId");
                }
            }
        }
        private int _instrumentMarketId;
        [DataMember]
        public System.DateTime ReferenceDate
        {	
    		
            get { return _referenceDate; }
            set
            {
                if (_referenceDate != value)
                {
                    ChangeTracker.RecordOriginalValue("ReferenceDate", _referenceDate);
                    _referenceDate = value;
                    OnPropertyChanged("ReferenceDate");
                }
            }
        }
        private System.DateTime _referenceDate;
        [DataMember]
        public decimal Value
        {	
    		
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    ChangeTracker.RecordOriginalValue("Value", _value);
                    _value = value;
                    OnPropertyChanged("Value");
                }
            }
        }
        private decimal _value;
        [DataMember]
        public System.DateTime StartDt
        {	
    		
            get { return _startDt; }
            private set
            {
                if (_startDt != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDt", _startDt);
                    _startDt = value;
                    OnPropertyChanged("StartDt");
                }
            }
        }
        private System.DateTime _startDt;
        [DataMember]
        public int UpdateUserID
        {	
    		
            get { return _updateUserID; }
            private set
            {
                if (_updateUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateUserID", _updateUserID);
                    _updateUserID = value;
                    OnPropertyChanged("UpdateUserID");
                }
            }
        }
        private int _updateUserID;
        [DataMember]
        private byte[] DataVersion
        {	
    		
            get { return _dataVersion; }
            set
            {
                if (_dataVersion != value)
                {
                    ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
                    _dataVersion = value;
                    OnPropertyChanged("DataVersion");
                }
            }
        }
        private byte[] _dataVersion;
        [DataMember]
        public Nullable<int> RawAnalyticId
        {	
    		
            get { return _rawAnalyticId; }
            set
            {
                if (_rawAnalyticId != value)
                {
                    ChangeTracker.RecordOriginalValue("RawAnalyticId", _rawAnalyticId);
                    if (!IsDeserializing)
                    {
                        if (RawAnalytic != null && RawAnalytic.RawAnalyticId != value)
                        {
                            RawAnalytic = null;
                        }
                    }
                    _rawAnalyticId = value;
                    OnPropertyChanged("RawAnalyticId");
                }
            }
        }
        private Nullable<int> _rawAnalyticId;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public RawAnalytic RawAnalytic
        {
            get { return _rawAnalytic; }
            set
            {
                if (!ReferenceEquals(_rawAnalytic, value))
                {
                    var previousValue = _rawAnalytic;
                    _rawAnalytic = value;
                    FixupRawAnalytic(previousValue);
                    OnNavigationPropertyChanged("RawAnalytic");
                }
            }
        }
        private RawAnalytic _rawAnalytic;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            RawAnalytic = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupRawAnalytic(RawAnalytic previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Analytics.Contains(this))
            {
                previousValue.Analytics.Remove(this);
            }
    
            if (RawAnalytic != null)
            {
                if (!RawAnalytic.Analytics.Contains(this))
                {
                    RawAnalytic.Analytics.Add(this);
                }
    
                RawAnalyticId = RawAnalytic.RawAnalyticId;
            }
            else if (!skipKeys)
            {
                RawAnalyticId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("RawAnalytic")
                    && (ChangeTracker.OriginalValues["RawAnalytic"] == RawAnalytic))
                {
                    ChangeTracker.OriginalValues.Remove("RawAnalytic");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("RawAnalytic", previousValue);
                }
                if (RawAnalytic != null && !RawAnalytic.ChangeTracker.ChangeTrackingEnabled)
                {
                    RawAnalytic.StartTracking();
                }
            }
        }

        #endregion
    }
}
