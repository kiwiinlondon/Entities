//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Odey.Framework.Keeley.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(EntityRankingSchemeItem))]
    public partial class EntityRankingSchemeOrder: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
        [DataMember]
        public int EntityRankingSchemeOrderId
        {	
    		
            get { return _entityRankingSchemeOrderId; }
            set
            {
                if (_entityRankingSchemeOrderId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EntityRankingSchemeOrderId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _entityRankingSchemeOrderId = value;
                    OnPropertyChanged("EntityRankingSchemeOrderId");
                }
            }
        }
        private int _entityRankingSchemeOrderId;
        [DataMember]
        public int EntityRankingSchemeId
        {	
    		
            get { return _entityRankingSchemeId; }
            set
            {
                if (_entityRankingSchemeId != value)
                {
                    ChangeTracker.RecordOriginalValue("EntityRankingSchemeId", _entityRankingSchemeId);
                    _entityRankingSchemeId = value;
                    OnPropertyChanged("EntityRankingSchemeId");
                }
            }
        }
        private int _entityRankingSchemeId;
        [DataMember]
        public int EntityTypeId
        {	
    		
            get { return _entityTypeId; }
            set
            {
                if (_entityTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("EntityTypeId", _entityTypeId);
                    _entityTypeId = value;
                    OnPropertyChanged("EntityTypeId");
                }
            }
        }
        private int _entityTypeId;
        [DataMember]
        public int EntityRankingSchemeItemId
        {	
    		
            get { return _entityRankingSchemeItemId; }
            set
            {
                if (_entityRankingSchemeItemId != value)
                {
                    ChangeTracker.RecordOriginalValue("EntityRankingSchemeItemId", _entityRankingSchemeItemId);
                    if (!IsDeserializing)
                    {
                        if (EntityRankingSchemeItem != null && EntityRankingSchemeItem.EntityRankingSchemeItemId != value)
                        {
                            EntityRankingSchemeItem = null;
                        }
                    }
                    _entityRankingSchemeItemId = value;
                    OnPropertyChanged("EntityRankingSchemeItemId");
                }
            }
        }
        private int _entityRankingSchemeItemId;
        [DataMember]
        public int Ordering
        {	
    		
            get { return _ordering; }
            set
            {
                if (_ordering != value)
                {
                    ChangeTracker.RecordOriginalValue("Ordering", _ordering);
                    _ordering = value;
                    OnPropertyChanged("Ordering");
                }
            }
        }
        private int _ordering;
        [DataMember]
        public System.DateTime StartDt
        {	
    		
            get { return _startDt; }
            private set
            {
                if (_startDt != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDt", _startDt);
                    _startDt = value;
                    OnPropertyChanged("StartDt");
                }
            }
        }
        private System.DateTime _startDt;
        [DataMember]
        public int UpdateUserID
        {	
    		
            get { return _updateUserID; }
            private set
            {
                if (_updateUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateUserID", _updateUserID);
                    _updateUserID = value;
                    OnPropertyChanged("UpdateUserID");
                }
            }
        }
        private int _updateUserID;
        [DataMember]
        private byte[] DataVersion
        {	
    		
            get { return _dataVersion; }
            set
            {
                if (_dataVersion != value)
                {
                    ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
                    _dataVersion = value;
                    OnPropertyChanged("DataVersion");
                }
            }
        }
        private byte[] _dataVersion;
        [DataMember]
        public bool AlwaysStore
        {	
    		
            get { return _alwaysStore; }
            set
            {
                if (_alwaysStore != value)
                {
                    ChangeTracker.RecordOriginalValue("AlwaysStore", _alwaysStore);
                    _alwaysStore = value;
                    OnPropertyChanged("AlwaysStore");
                }
            }
        }
        private bool _alwaysStore;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public EntityRankingSchemeItem EntityRankingSchemeItem
        {
            get { return _entityRankingSchemeItem; }
            set
            {
                if (!ReferenceEquals(_entityRankingSchemeItem, value))
                {
                    var previousValue = _entityRankingSchemeItem;
                    _entityRankingSchemeItem = value;
                    FixupEntityRankingSchemeItem(previousValue);
                    OnNavigationPropertyChanged("EntityRankingSchemeItem");
                }
            }
        }
        private EntityRankingSchemeItem _entityRankingSchemeItem;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            EntityRankingSchemeItem = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupEntityRankingSchemeItem(EntityRankingSchemeItem previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (EntityRankingSchemeItem != null)
            {
                EntityRankingSchemeItemId = EntityRankingSchemeItem.EntityRankingSchemeItemId;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EntityRankingSchemeItem")
                    && (ChangeTracker.OriginalValues["EntityRankingSchemeItem"] == EntityRankingSchemeItem))
                {
                    ChangeTracker.OriginalValues.Remove("EntityRankingSchemeItem");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EntityRankingSchemeItem", previousValue);
                }
                if (EntityRankingSchemeItem != null && !EntityRankingSchemeItem.ChangeTracker.ChangeTrackingEnabled)
                {
                    EntityRankingSchemeItem.StartTracking();
                }
            }
        }

        #endregion
    }
}
