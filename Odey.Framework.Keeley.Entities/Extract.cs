//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Odey.Framework.Keeley.Entities
{
    [DataContract(IsReference = true)]
    public partial class Extract: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
        [DataMember]
        public int ExtractID
        {	
    		
            get { return _extractID; }
            set
            {
                if (_extractID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ExtractID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _extractID = value;
                    OnPropertyChanged("ExtractID");
                }
            }
        }
        private int _extractID;
        [DataMember]
        public int ExtractTypeId
        {	
    		
            get { return _extractTypeId; }
            set
            {
                if (_extractTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ExtractTypeId", _extractTypeId);
                    _extractTypeId = value;
                    OnPropertyChanged("ExtractTypeId");
                }
            }
        }
        private int _extractTypeId;
        [DataMember]
        public string Name
        {	
    		
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
        [DataMember]
        public System.DateTime StartDt
        {	
    		
            get { return _startDt; }
            private set
            {
                if (_startDt != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDt", _startDt);
                    _startDt = value;
                    OnPropertyChanged("StartDt");
                }
            }
        }
        private System.DateTime _startDt;
        [DataMember]
        public int UpdateUserID
        {	
    		
            get { return _updateUserID; }
            private set
            {
                if (_updateUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateUserID", _updateUserID);
                    _updateUserID = value;
                    OnPropertyChanged("UpdateUserID");
                }
            }
        }
        private int _updateUserID;
        [DataMember]
        private byte[] DataVersion
        {	
    		
            get { return _dataVersion; }
            set
            {
                if (_dataVersion != value)
                {
                    ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
                    _dataVersion = value;
                    OnPropertyChanged("DataVersion");
                }
            }
        }
        private byte[] _dataVersion;
        [DataMember]
        public int ExtractOutputTypeID
        {	
    		
            get { return _extractOutputTypeID; }
            set
            {
                if (_extractOutputTypeID != value)
                {
                    ChangeTracker.RecordOriginalValue("ExtractOutputTypeID", _extractOutputTypeID);
                    _extractOutputTypeID = value;
                    OnPropertyChanged("ExtractOutputTypeID");
                }
            }
        }
        private int _extractOutputTypeID;
        [DataMember]
        public int ExtractRunnerTypeID
        {	
    		
            get { return _extractRunnerTypeID; }
            set
            {
                if (_extractRunnerTypeID != value)
                {
                    ChangeTracker.RecordOriginalValue("ExtractRunnerTypeID", _extractRunnerTypeID);
                    _extractRunnerTypeID = value;
                    OnPropertyChanged("ExtractRunnerTypeID");
                }
            }
        }
        private int _extractRunnerTypeID;
        [DataMember]
        public int ExtractInputTypeID
        {	
    		
            get { return _extractInputTypeID; }
            set
            {
                if (_extractInputTypeID != value)
                {
                    ChangeTracker.RecordOriginalValue("ExtractInputTypeID", _extractInputTypeID);
                    _extractInputTypeID = value;
                    OnPropertyChanged("ExtractInputTypeID");
                }
            }
        }
        private int _extractInputTypeID;
        [DataMember]
        public int ExtractDeliveryTypeID
        {	
    		
            get { return _extractDeliveryTypeID; }
            set
            {
                if (_extractDeliveryTypeID != value)
                {
                    ChangeTracker.RecordOriginalValue("ExtractDeliveryTypeID", _extractDeliveryTypeID);
                    _extractDeliveryTypeID = value;
                    OnPropertyChanged("ExtractDeliveryTypeID");
                }
            }
        }
        private int _extractDeliveryTypeID;
        [DataMember]
        public bool SendIfEmpty
        {	
    		
            get { return _sendIfEmpty; }
            set
            {
                if (_sendIfEmpty != value)
                {
                    ChangeTracker.RecordOriginalValue("SendIfEmpty", _sendIfEmpty);
                    _sendIfEmpty = value;
                    OnPropertyChanged("SendIfEmpty");
                }
            }
        }
        private bool _sendIfEmpty;
        [DataMember]
        public int ExtractOutputContainerTypeID
        {	
    		
            get { return _extractOutputContainerTypeID; }
            set
            {
                if (_extractOutputContainerTypeID != value)
                {
                    ChangeTracker.RecordOriginalValue("ExtractOutputContainerTypeID", _extractOutputContainerTypeID);
                    _extractOutputContainerTypeID = value;
                    OnPropertyChanged("ExtractOutputContainerTypeID");
                }
            }
        }
        private int _extractOutputContainerTypeID;
        [DataMember]
        public Nullable<int> ExtractResponseHandlerTypeId
        {	
    		
            get { return _extractResponseHandlerTypeId; }
            set
            {
                if (_extractResponseHandlerTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("ExtractResponseHandlerTypeId", _extractResponseHandlerTypeId);
                    _extractResponseHandlerTypeId = value;
                    OnPropertyChanged("ExtractResponseHandlerTypeId");
                }
            }
        }
        private Nullable<int> _extractResponseHandlerTypeId;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
