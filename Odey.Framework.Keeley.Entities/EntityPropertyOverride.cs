//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Odey.Framework.Keeley.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(EntityProperty))]
    public partial class EntityPropertyOverride: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
        [DataMember]
        public int EntityPropertyOverrideId
        {	
    		
            get { return _entityPropertyOverrideId; }
            set
            {
                if (_entityPropertyOverrideId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EntityPropertyOverrideId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _entityPropertyOverrideId = value;
                    OnPropertyChanged("EntityPropertyOverrideId");
                }
            }
        }
        private int _entityPropertyOverrideId;
        [DataMember]
        public int EntityID
        {	
    		
            get { return _entityID; }
            set
            {
                if (_entityID != value)
                {
                    ChangeTracker.RecordOriginalValue("EntityID", _entityID);
                    _entityID = value;
                    OnPropertyChanged("EntityID");
                }
            }
        }
        private int _entityID;
        [DataMember]
        public int EntityPropertyId
        {	
    		
            get { return _entityPropertyId; }
            set
            {
                if (_entityPropertyId != value)
                {
                    ChangeTracker.RecordOriginalValue("EntityPropertyId", _entityPropertyId);
                    if (!IsDeserializing)
                    {
                        if (EntityProperty != null && EntityProperty.EntityPropertyID != value)
                        {
                            EntityProperty = null;
                        }
                    }
                    _entityPropertyId = value;
                    OnPropertyChanged("EntityPropertyId");
                }
            }
        }
        private int _entityPropertyId;
        [DataMember]
        public Nullable<int> IntValue
        {	
    		
            get { return _intValue; }
            set
            {
                if (_intValue != value)
                {
                    ChangeTracker.RecordOriginalValue("IntValue", _intValue);
                    _intValue = value;
                    OnPropertyChanged("IntValue");
                }
            }
        }
        private Nullable<int> _intValue;
        [DataMember]
        public string StringValue
        {	
    		
            get { return _stringValue; }
            set
            {
                if (_stringValue != value)
                {
                    ChangeTracker.RecordOriginalValue("StringValue", _stringValue);
                    _stringValue = value;
                    OnPropertyChanged("StringValue");
                }
            }
        }
        private string _stringValue;
        [DataMember]
        public Nullable<decimal> DecimalValue
        {	
    		
            get { return _decimalValue; }
            set
            {
                if (_decimalValue != value)
                {
                    ChangeTracker.RecordOriginalValue("DecimalValue", _decimalValue);
                    _decimalValue = value;
                    OnPropertyChanged("DecimalValue");
                }
            }
        }
        private Nullable<decimal> _decimalValue;
        [DataMember]
        public Nullable<System.DateTime> DateTimeValue
        {	
    		
            get { return _dateTimeValue; }
            set
            {
                if (_dateTimeValue != value)
                {
                    ChangeTracker.RecordOriginalValue("DateTimeValue", _dateTimeValue);
                    _dateTimeValue = value;
                    OnPropertyChanged("DateTimeValue");
                }
            }
        }
        private Nullable<System.DateTime> _dateTimeValue;
        [DataMember]
        public System.DateTime StartDt
        {	
    		
            get { return _startDt; }
            private set
            {
                if (_startDt != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDt", _startDt);
                    _startDt = value;
                    OnPropertyChanged("StartDt");
                }
            }
        }
        private System.DateTime _startDt;
        [DataMember]
        public int UpdateUserID
        {	
    		
            get { return _updateUserID; }
            private set
            {
                if (_updateUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateUserID", _updateUserID);
                    _updateUserID = value;
                    OnPropertyChanged("UpdateUserID");
                }
            }
        }
        private int _updateUserID;
        [DataMember]
        private byte[] DataVersion
        {	
    		
            get { return _dataVersion; }
            set
            {
                if (_dataVersion != value)
                {
                    ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
                    _dataVersion = value;
                    OnPropertyChanged("DataVersion");
                }
            }
        }
        private byte[] _dataVersion;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public EntityProperty EntityProperty
        {
            get { return _entityProperty; }
            set
            {
                if (!ReferenceEquals(_entityProperty, value))
                {
                    var previousValue = _entityProperty;
                    _entityProperty = value;
                    FixupEntityProperty(previousValue);
                    OnNavigationPropertyChanged("EntityProperty");
                }
            }
        }
        private EntityProperty _entityProperty;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            EntityProperty = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupEntityProperty(EntityProperty previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.EntityPropertyOverrides.Contains(this))
            {
                previousValue.EntityPropertyOverrides.Remove(this);
            }
    
            if (EntityProperty != null)
            {
                if (!EntityProperty.EntityPropertyOverrides.Contains(this))
                {
                    EntityProperty.EntityPropertyOverrides.Add(this);
                }
    
                EntityPropertyId = EntityProperty.EntityPropertyID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EntityProperty")
                    && (ChangeTracker.OriginalValues["EntityProperty"] == EntityProperty))
                {
                    ChangeTracker.OriginalValues.Remove("EntityProperty");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EntityProperty", previousValue);
                }
                if (EntityProperty != null && !EntityProperty.ChangeTracker.ChangeTrackingEnabled)
                {
                    EntityProperty.StartTracking();
                }
            }
        }

        #endregion
    }
}
