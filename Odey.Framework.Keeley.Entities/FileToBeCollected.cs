//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Odey.Framework.Keeley.Entities
{
    [DataContract(IsReference = true)]
    public partial class FileToBeCollected: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
        [DataMember]
        public int FileToBeCollectedId
        {	
    		
            get { return _fileToBeCollectedId; }
            set
            {
                if (_fileToBeCollectedId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FileToBeCollectedId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _fileToBeCollectedId = value;
                    OnPropertyChanged("FileToBeCollectedId");
                }
            }
        }
        private int _fileToBeCollectedId;
        [DataMember]
        public string Name
        {	
    		
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
        [DataMember]
        public int FileCollectionTypeId
        {	
    		
            get { return _fileCollectionTypeId; }
            set
            {
                if (_fileCollectionTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("FileCollectionTypeId", _fileCollectionTypeId);
                    _fileCollectionTypeId = value;
                    OnPropertyChanged("FileCollectionTypeId");
                }
            }
        }
        private int _fileCollectionTypeId;
        [DataMember]
        public string FileCollectionTypeProfileName
        {	
    		
            get { return _fileCollectionTypeProfileName; }
            set
            {
                if (_fileCollectionTypeProfileName != value)
                {
                    ChangeTracker.RecordOriginalValue("FileCollectionTypeProfileName", _fileCollectionTypeProfileName);
                    _fileCollectionTypeProfileName = value;
                    OnPropertyChanged("FileCollectionTypeProfileName");
                }
            }
        }
        private string _fileCollectionTypeProfileName;
        [DataMember]
        public string FileDestinationPath
        {	
    		
            get { return _fileDestinationPath; }
            set
            {
                if (_fileDestinationPath != value)
                {
                    ChangeTracker.RecordOriginalValue("FileDestinationPath", _fileDestinationPath);
                    _fileDestinationPath = value;
                    OnPropertyChanged("FileDestinationPath");
                }
            }
        }
        private string _fileDestinationPath;
        [DataMember]
        public string FileNameTemplate
        {	
    		
            get { return _fileNameTemplate; }
            set
            {
                if (_fileNameTemplate != value)
                {
                    ChangeTracker.RecordOriginalValue("FileNameTemplate", _fileNameTemplate);
                    _fileNameTemplate = value;
                    OnPropertyChanged("FileNameTemplate");
                }
            }
        }
        private string _fileNameTemplate;
        [DataMember]
        public Nullable<int> FileNameResolutionTypeId
        {	
    		
            get { return _fileNameResolutionTypeId; }
            set
            {
                if (_fileNameResolutionTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("FileNameResolutionTypeId", _fileNameResolutionTypeId);
                    _fileNameResolutionTypeId = value;
                    OnPropertyChanged("FileNameResolutionTypeId");
                }
            }
        }
        private Nullable<int> _fileNameResolutionTypeId;
        [DataMember]
        public int FileTypeId
        {	
    		
            get { return _fileTypeId; }
            set
            {
                if (_fileTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("FileTypeId", _fileTypeId);
                    _fileTypeId = value;
                    OnPropertyChanged("FileTypeId");
                }
            }
        }
        private int _fileTypeId;
        [DataMember]
        public System.DateTime StartDt
        {	
    		
            get { return _startDt; }
            private set
            {
                if (_startDt != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDt", _startDt);
                    _startDt = value;
                    OnPropertyChanged("StartDt");
                }
            }
        }
        private System.DateTime _startDt;
        [DataMember]
        public int UpdateUserID
        {	
    		
            get { return _updateUserID; }
            private set
            {
                if (_updateUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateUserID", _updateUserID);
                    _updateUserID = value;
                    OnPropertyChanged("UpdateUserID");
                }
            }
        }
        private int _updateUserID;
        [DataMember]
        private byte[] DataVersion
        {	
    		
            get { return _dataVersion; }
            set
            {
                if (_dataVersion != value)
                {
                    ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
                    _dataVersion = value;
                    OnPropertyChanged("DataVersion");
                }
            }
        }
        private byte[] _dataVersion;
        [DataMember]
        public string EmailWhenReceived
        {	
    		
            get { return _emailWhenReceived; }
            set
            {
                if (_emailWhenReceived != value)
                {
                    ChangeTracker.RecordOriginalValue("EmailWhenReceived", _emailWhenReceived);
                    _emailWhenReceived = value;
                    OnPropertyChanged("EmailWhenReceived");
                }
            }
        }
        private string _emailWhenReceived;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
