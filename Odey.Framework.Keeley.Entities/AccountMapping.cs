//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Odey.Framework.Keeley.Entities
{
    [DataContract(IsReference = true)]
    public partial class AccountMapping: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
        [DataMember]
        public int AccountMappingId
        {	
    		
            get { return _accountMappingId; }
            set
            {
                if (_accountMappingId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'AccountMappingId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _accountMappingId = value;
                    OnPropertyChanged("AccountMappingId");
                }
            }
        }
        private int _accountMappingId;
        [DataMember]
        public string Name
        {	
    		
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
        [DataMember]
        public Nullable<int> FundId
        {	
    		
            get { return _fundId; }
            set
            {
                if (_fundId != value)
                {
                    ChangeTracker.RecordOriginalValue("FundId", _fundId);
                    _fundId = value;
                    OnPropertyChanged("FundId");
                }
            }
        }
        private Nullable<int> _fundId;
        [DataMember]
        public Nullable<int> CounterpartyId
        {	
    		
            get { return _counterpartyId; }
            set
            {
                if (_counterpartyId != value)
                {
                    ChangeTracker.RecordOriginalValue("CounterpartyId", _counterpartyId);
                    _counterpartyId = value;
                    OnPropertyChanged("CounterpartyId");
                }
            }
        }
        private Nullable<int> _counterpartyId;
        [DataMember]
        public Nullable<int> InstrumentClassId
        {	
    		
            get { return _instrumentClassId; }
            set
            {
                if (_instrumentClassId != value)
                {
                    ChangeTracker.RecordOriginalValue("InstrumentClassId", _instrumentClassId);
                    _instrumentClassId = value;
                    OnPropertyChanged("InstrumentClassId");
                }
            }
        }
        private Nullable<int> _instrumentClassId;
        [DataMember]
        public Nullable<int> AccountIdToMap
        {	
    		
            get { return _accountIdToMap; }
            set
            {
                if (_accountIdToMap != value)
                {
                    ChangeTracker.RecordOriginalValue("AccountIdToMap", _accountIdToMap);
                    _accountIdToMap = value;
                    OnPropertyChanged("AccountIdToMap");
                }
            }
        }
        private Nullable<int> _accountIdToMap;
        [DataMember]
        public int AccountId
        {	
    		
            get { return _accountId; }
            set
            {
                if (_accountId != value)
                {
                    ChangeTracker.RecordOriginalValue("AccountId", _accountId);
                    _accountId = value;
                    OnPropertyChanged("AccountId");
                }
            }
        }
        private int _accountId;
        [DataMember]
        public int UpdateUserID
        {	
    		
            get { return _updateUserID; }
            private set
            {
                if (_updateUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateUserID", _updateUserID);
                    _updateUserID = value;
                    OnPropertyChanged("UpdateUserID");
                }
            }
        }
        private int _updateUserID;
        [DataMember]
        private byte[] DataVersion
        {	
    		
            get { return _dataVersion; }
            set
            {
                if (_dataVersion != value)
                {
                    ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
                    _dataVersion = value;
                    OnPropertyChanged("DataVersion");
                }
            }
        }
        private byte[] _dataVersion;
        [DataMember]
        public bool ApplyToInstrumentOnly
        {	
    		
            get { return _applyToInstrumentOnly; }
            set
            {
                if (_applyToInstrumentOnly != value)
                {
                    ChangeTracker.RecordOriginalValue("ApplyToInstrumentOnly", _applyToInstrumentOnly);
                    _applyToInstrumentOnly = value;
                    OnPropertyChanged("ApplyToInstrumentOnly");
                }
            }
        }
        private bool _applyToInstrumentOnly;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
