//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Odey.Framework.Keeley.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Charge))]
    [KnownType(typeof(PortfolioEvent))]
    public partial class InternalAllocation: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
        [DataMember]
        public int EventID
        {	
    		
            get { return _eventID; }
            set
            {
                if (_eventID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EventID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _eventID = value;
                    OnPropertyChanged("EventID");
                }
            }
        }
        private int _eventID;
        [DataMember]
        public string FMContEventInd
        {	
    		
            get { return _fMContEventInd; }
            set
            {
                if (_fMContEventInd != value)
                {
                    ChangeTracker.RecordOriginalValue("FMContEventInd", _fMContEventInd);
                    _fMContEventInd = value;
                    OnPropertyChanged("FMContEventInd");
                }
            }
        }
        private string _fMContEventInd;
        [DataMember]
        public int FMContEventId
        {	
    		
            get { return _fMContEventId; }
            set
            {
                if (_fMContEventId != value)
                {
                    ChangeTracker.RecordOriginalValue("FMContEventId", _fMContEventId);
                    _fMContEventId = value;
                    OnPropertyChanged("FMContEventId");
                }
            }
        }
        private int _fMContEventId;
        [DataMember]
        public int FMOriginalContEventId
        {	
    		
            get { return _fMOriginalContEventId; }
            set
            {
                if (_fMOriginalContEventId != value)
                {
                    ChangeTracker.RecordOriginalValue("FMOriginalContEventId", _fMOriginalContEventId);
                    _fMOriginalContEventId = value;
                    OnPropertyChanged("FMOriginalContEventId");
                }
            }
        }
        private int _fMOriginalContEventId;
        [DataMember]
        public int MatchedStatusId
        {	
    		
            get { return _matchedStatusId; }
            set
            {
                if (_matchedStatusId != value)
                {
                    ChangeTracker.RecordOriginalValue("MatchedStatusId", _matchedStatusId);
                    _matchedStatusId = value;
                    OnPropertyChanged("MatchedStatusId");
                }
            }
        }
        private int _matchedStatusId;
        [DataMember]
        public int AccountID
        {	
    		
            get { return _accountID; }
            set
            {
                if (_accountID != value)
                {
                    ChangeTracker.RecordOriginalValue("AccountID", _accountID);
                    _accountID = value;
                    OnPropertyChanged("AccountID");
                }
            }
        }
        private int _accountID;
        [DataMember]
        public int BookID
        {	
    		
            get { return _bookID; }
            set
            {
                if (_bookID != value)
                {
                    ChangeTracker.RecordOriginalValue("BookID", _bookID);
                    _bookID = value;
                    OnPropertyChanged("BookID");
                }
            }
        }
        private int _bookID;
        [DataMember]
        public decimal Quantity
        {	
    		
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    ChangeTracker.RecordOriginalValue("Quantity", _quantity);
                    _quantity = value;
                    OnPropertyChanged("Quantity");
                }
            }
        }
        private decimal _quantity;
        [DataMember]
        public bool IsCancelled
        {	
    		
            get { return _isCancelled; }
            set
            {
                if (_isCancelled != value)
                {
                    ChangeTracker.RecordOriginalValue("IsCancelled", _isCancelled);
                    _isCancelled = value;
                    OnPropertyChanged("IsCancelled");
                }
            }
        }
        private bool _isCancelled;
        [DataMember]
        public System.DateTime StartDt
        {	
    		
            get { return _startDt; }
            private set
            {
                if (_startDt != value)
                {
                    ChangeTracker.RecordOriginalValue("StartDt", _startDt);
                    _startDt = value;
                    OnPropertyChanged("StartDt");
                }
            }
        }
        private System.DateTime _startDt;
        [DataMember]
        public int UpdateUserID
        {	
    		
            get { return _updateUserID; }
            private set
            {
                if (_updateUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("UpdateUserID", _updateUserID);
                    _updateUserID = value;
                    OnPropertyChanged("UpdateUserID");
                }
            }
        }
        private int _updateUserID;
        [DataMember]
        private byte[] DataVersion
        {	
    		
            get { return _dataVersion; }
            set
            {
                if (_dataVersion != value)
                {
                    ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
                    _dataVersion = value;
                    OnPropertyChanged("DataVersion");
                }
            }
        }
        private byte[] _dataVersion;
        [DataMember]
        public int ParentEventId
        {	
    		
            get { return _parentEventId; }
            set
            {
                if (_parentEventId != value)
                {
                    ChangeTracker.RecordOriginalValue("ParentEventId", _parentEventId);
                    _parentEventId = value;
                    OnPropertyChanged("ParentEventId");
                }
            }
        }
        private int _parentEventId;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Charge> Charges
        {
            get
            {
                if (_charges == null)
                {
                    _charges = new TrackableCollection<Charge>();
                    _charges.CollectionChanged += FixupCharges;
                }
                return _charges;
            }
            set
            {
                if (!ReferenceEquals(_charges, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_charges != null)
                    {
                        _charges.CollectionChanged -= FixupCharges;
                    }
                    _charges = value;
                    if (_charges != null)
                    {
                        _charges.CollectionChanged += FixupCharges;
                    }
                    OnNavigationPropertyChanged("Charges");
                }
            }
        }
        private TrackableCollection<Charge> _charges;
    
        [DataMember]
        public TrackableCollection<PortfolioEvent> PortfolioEvents
        {
            get
            {
                if (_portfolioEvents == null)
                {
                    _portfolioEvents = new TrackableCollection<PortfolioEvent>();
                    _portfolioEvents.CollectionChanged += FixupPortfolioEvents;
                }
                return _portfolioEvents;
            }
            set
            {
                if (!ReferenceEquals(_portfolioEvents, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_portfolioEvents != null)
                    {
                        _portfolioEvents.CollectionChanged -= FixupPortfolioEvents;
                    }
                    _portfolioEvents = value;
                    if (_portfolioEvents != null)
                    {
                        _portfolioEvents.CollectionChanged += FixupPortfolioEvents;
                    }
                    OnNavigationPropertyChanged("PortfolioEvents");
                }
            }
        }
        private TrackableCollection<PortfolioEvent> _portfolioEvents;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Charges.Clear();
            PortfolioEvents.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupCharges(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Charge item in e.NewItems)
                {
                    item.EventID = EventID;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Charges", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Charge item in e.OldItems)
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Charges", item);
                    }
                }
            }
        }
    
        private void FixupPortfolioEvents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PortfolioEvent item in e.NewItems)
                {
                    item.InternalAllocationId = EventID;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PortfolioEvents", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PortfolioEvent item in e.OldItems)
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PortfolioEvents", item);
                    }
                }
            }
        }

        #endregion
    }
}
